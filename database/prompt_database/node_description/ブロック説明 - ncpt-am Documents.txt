ブロック説明
Robot
wait
命令を送信するロボットを選択する
⼊⼒変数
変数名 名称 形式 有効範囲 初期値 内容
robotNameロボット名 閲覧専⽤ 開発済みのロ
ボット6種類
1. Dobot
MG400
2. Fairino FR
3. Hitbot Z
ARM
4. YAMAHA
Scara
5. IAI Tabletop
6. ---
7. ---"Setting"サイド
バーで選択し
たロボット名Robotカテゴリ
のブロック命
令を送るため
のロボット名
使⽤例
"moveL"ブロックを参照して下さい
使⽤上の注意
‧フローの先頭にのみ配置できます
‧同⼀ワークスペースに 2 つ以上配置すると意図しない動作となる場合があります
set motor
ロボットのサーボモータ電源を操作する

⼊⼒変数
変数名 名称 形式 有効範囲 初期値 内容
motorStatusサーボモータ
操作プルダウン - ON:電源起動
- OFF:電源停⽌ON サーボモータ
電源の操作⽅
法
使⽤例
"move"ブロックを参照して下さい
使⽤上の注意
"move"ブロックを使⽤する前に配置して下さい
move origin
ロボットを原点復帰する
⼊⼒変数
なし
使⽤例
"IAI 3軸テーブルトップ " を原点復帰させ、 "Home" 位置に移動させます
使⽤上の注意
‧インクリメント型のエンコーダーを備えたロボットにのみ必要となります
‧Dobot MG400 、 Fairino FR 、 Hitbot Z ARM には不要です
moveL

ロボットを全軸絶対直線移動する
⼊⼒変数
変数名 名称 形式 有効範囲 初期値 内容
pointName ⽬標位置名プルダウンティーチング
表で設定した
ポイント名
（最⼤100 点）P1のポイント
名ロボットが到
達する⽬標位
置
X X軸動作有無プルダウン X: 有効
-: 無効X X軸の移動を許
可
Y Y軸動作有無プルダウン Y: 有効
-: 無効Y Y軸の移動を許
可
Z Z軸動作有無プルダウン Z: 有効
-: 無効Z Z軸の移動を許
可
Rz Rz軸動作有無プルダウン Rz: 有効
-: 無効Rz Rz軸の移動を
許可
Ry Ry軸動作有無プルダウン Ry: 有効
-: 無効Ry Ryの移動を許
可
Rx Rx軸動作有無プルダウン Rx: 有効
-: 無効Rx Ryの移動を許
可
pallet No.パレット番号プルダウン pallet No.1 ~
10no pallet ⽬標位置をオ
フセットする
ためのパレッ
ト補正量
camera No.カメラ番号プルダウン camera No.1 ~
10no camera ⽬標位置をオ
フセットする
ためのカメラ
補正量
使⽤例
Dobot MG400を⽬標位置 "Home" へ移動する

使⽤上の注意
‧"select"ブロックでロボットを定義してから使って下さい
‧"set motor"ブロックをサーボ電源を ON にした後に使って下さい
‧4軸のロボットに対して、 Rz が R(= Θ 回転 ) となります（ Ry と Rx は無効）
moveP
ロボットを全軸絶対 PTP 移動する
⼊⼒変数
変数名 名称 形式 有効範囲 初期値 内容
pointName ⽬標位置名プルダウンティーチング
表で設定した
ポイント名
（最⼤100 点）P1のポイント
名ロボットが到
達する⽬標位
置
X X軸動作有無プルダウン X: 有効
-: 無効X X軸の移動を許
可
Y Y軸動作有無プルダウン Y: 有効
-: 無効Y Y軸の移動を許
可
Z Z軸動作有無プルダウン Z: 有効
-: 無効Z Z軸の移動を許
可
Rz Rz軸動作有無プルダウン Rz: 有効
-: 無効Rz Rz軸の移動を
許可
Ry Ry軸動作有無プルダウン Ry: 有効
-: 無効Ry Ryの移動を許
可
Rx Rx軸動作有無プルダウン Rx: 有効
-: 無効Rx Ryの移動を許
可

変数名 名称 形式 有効範囲 初期値 内容
pallet No.パレット番号プルダウン pallet No.1 ~
10no pallet ⽬標位置をオ
フセットする
ためのパレッ
ト補正量
camera No.カメラ番号プルダウン camera No.1 ~
10no camera ⽬標位置をオ
フセットする
ためのカメラ
補正量
使⽤例
Dobot MG400を⽬標位置 "Home" へ移動する
使⽤上の注意
‧"select"ブロックでロボットを定義してから使って下さい
‧"set motor"ブロックをサーボ電源を ON にした後に使って下さい
‧4軸のロボットに対して、 Rz が R(= Θ 回転 ) となります（ Ry と Rx は無効）
wait input
ロボット I/O の⼊⼒が指定した条件となるまで待機する
⼊⼒変数
変数名 名称 形式 有効範囲 初期値 内容
inputPinName⼊⼒ピン名プルダウンロボット毎に
変数名と数は
異なる番号が⼩さい
ピン名⼊⼒を状態を
取得するピン
名

変数名 名称 形式 有効範囲 初期値 内容
inputPinStatus⼊⼒ピン操作
⽅法プルダウン - ON:アクティ
ブ
- OFF:⾮アクテ
ィブON 対象⼊⼒ピン
の状態
使⽤例
"Fairino FR" の "DI00" ピンが ON するまで待機します
ロボット IOサイドバーにて、ピン名を任意の⽂字に変更することも可能です
使⽤上の注意
"select"ブロックでロボットを定義してから使って下さい
set output
ロボット I/O の出⼒を操作する
⼊⼒変数

変数名 名称 形式 有効範囲 初期値 内容
outputPinName出⼒ピン名プルダウンロボット毎に
異なる番号が⼩さい
ピン名出⼒を操作す
るピン名
outputPinStatus出⼒ピン操作プルダウン - ON:アクティ
ブ
- OFF:⾮アクテ
ィブON 対象出⼒ピン
の操作⽅法
使⽤例
"Fairino FR" の "DO00" ピンを ON にします
ロボット IOサイドバーにて、ピン名を任意の⽂字に変更することも可能です
使⽤上の注意
"select"ブロックでロボットを定義してから使って下さい
set output during
ロボット I/O の出⼒を指定した時間だけ操作する

⼊⼒変数
変数名 名称 形式 有効範囲 初期値 内容
outputPinName出⼒ピン名プルダウンロボット毎に
変数名と数は
異なる番号が⼩さい
ピン名出⼒を操作す
るピン名
outputPinStatus出⼒ピン操作
⽅法プルダウン - ON:アクティ
ブ
- OFF:⾮アクテ
ィブON 対象出⼒ピン
の操作⽅法
timerValue 出⼒ピン操作
時間プルダウン 変数表で設定
した変数名
（最⼤300 点）変数表で最初
に定義した変
数名対象出⼒ピン
の操作時間
（msec）
使⽤例
"Fairino FR" の "DO00" ピンを "100msec"ON にします（ "_const_***" はプルダウンメニューの下部に存在）
ロボット IOサイドバーにて、ピン名を任意の⽂字に変更することも可能です

使⽤上の注意
"select"ブロックでロボットを定義してから使って下さい
set output until
ロボット I/O の⼊⼒が指定した条件となるまで指定したピンの操作を継続する
⼊⼒変数
変数名 名称 形式 有効範囲 初期値 内容
outputPinName出⼒ピン名プルダウンロボット毎に
変数名と数は
異なる番号が⼩さい
ピン名出⼒を操作す
るピン名
outputPinStatus出⼒ピン操作
⽅法プルダウン - ON:アクティ
ブ
- OFF:⾮アクテ
ィブON 対象出⼒ピン
の操作⽅法
inputPinName⼊⼒ピン名プルダウンロボット毎に
変数名と数は
異なる番号が⼩さい
ピン名⼊⼒を状態を
取得するピン
名
inputPinStatus⼊⼒ピン操作
⽅法プルダウン - ON:アクティ
ブ
- OFF:⾮アクテ
ィブON 対象⼊⼒ピン
の状態
使⽤例
"Fairino FR" の "DI00" ピンが ON になるまで "DO00" ピンを ON にします
ロボット IOサイドバーにて、ピン名を任意の⽂字に変更することも可能です

使⽤上の注意
"select"ブロックでロボットを定義してから使って下さい
robot io
ロボット I/O 状態を論理値として返す
⼊⼒変数
変数名 名称 形式 有効範囲 初期値 内容
inputPinName⼊⼒ピン名プルダウンロボット毎に
異なる番号が⼩さい
ピン名⼊⼒状態を取
得するピン名
使⽤例
‧"DO00"ピンが ON の場合、 "Fairino FR" が A 点 → B 点 → D 点の順に移動します。
‧"DO00"ピンが ON の場合、 "Fairino FR" が A 点 → C 点 → D 点の順に移動します。

ロボット IOサイドバーにて、ピン名を任意の⽂字に変更することも可能です
使⽤上の注意
"select"ブロックでロボットを定義してから使って下さい
robot position
ロボット現在位置を数値として返す
⼊⼒変数

変数名 名称 形式 有効範囲 初期値 内容
axisName 軸名 プルダウン - X:X軸
- Y:Y軸
- Z:Z軸
- Rx:Rx軸
- Ry:Ry軸
- Rz:Rz軸番号が⼩さい
ピン名現在位置を取
得する軸名
使⽤例
‧現在X位置が 0mm 以上の場合、 "Fairino FR" が A 点 → C 点の順に移動します。
‧現在X位置が 0mm 未満の場合、 "Fairino FR" が B 点 → C 点の順に移動します。
使⽤上の注意
"select"ブロックでロボットを定義してから使って下さい
stop robot upon
設定した条件成⽴でロボットが停⽌する
⼊⼒変数
変数名 名称 形式 有効範囲 初期値 内容
triggerCondition動作開始条件
詳細プルダウン‧ー:常時
‧↑:⽴ち上がりー 動作を開始す
るための条件

変数名 名称 形式 有効範囲 初期値 内容
‧↓:⽴ち下がり 詳細
operatingCondition動作開始条件ブロック 論理値ブロッ
クなし 動作を開始す
るための条件
使⽤例
"Fairino FR" が動作中に、 "IO No.1" の "DI_0" が ON になるとロボットが停⽌します。
"Buttonサイドバー " にて、 Pause ボタンの押下で動作の⼀時停⽌を解除できます。

その後、 Runボタンの押下で動作を再開できます。
使⽤上の注意
"create_event"ブロック内で使って下さい
IO
connect external io
外部機器 I/O の出⼒を操作する

⼊⼒変数
変数名 名称 形式 有効範囲 初期値 内容
deviceNameデバイス名プルダウン DIO000~DIO005
（"ContecDeviceUtility" で
設定し
た"Device
Name"）DIO000 操作対象のデ
バイス名
makerメーカープルダウン - CONTEC CONTEC 対象IOユニッ
トのメーカー
IONo IO番号 プルダウン 1~10 IO No.1 操作対象の IO
番号
使⽤例
"set external io output" または  "wait external io input" ブロック等を参照して下さい
使⽤上の注意
"set external io output" または  "wait external io input" 等とセットで使⽤して下さい
wait external io input
外部機器 I/O の⼊⼒が指定した条件となるまで待機する
⼊⼒変数
変数名 名称 形式 有効範囲 初期値 内容
IONo IO番号 プルダウン 1~10 IO No.1 操作対象の IO
番号
inputPinName⼊⼒ピン名プルダウン 機器毎に異な
る番号が⼩さい
ピン名⼊⼒を状態を
取得するピン
名

変数名 名称 形式 有効範囲 初期値 内容
inputPinStatus⼊⼒ピン操作
⽅法プルダウン - ON:アクティ
ブ
- OFF:⾮アクテ
ィブON 対象⼊⼒ピン
の状態
使⽤例
"CONTEC" の "DI_0" ピンを ON するまで待機します
外部機器 IOサイドバーにて、ピン名を任意の⽂字に変更することも可能です
使⽤上の注意
"connect external io" ブロックで IO 機器を定義してから使って下さい
set external io output
外部機器 I/O の出⼒を操作する

⼊⼒変数
変数名 名称 形式 有効範囲 初期値 内容
IONo IO番号 プルダウン 1~10 IO No.1 操作対象の IO
番号
outputPinName出⼒ピン名プルダウン 機器毎に異な
る番号が⼩さい
ピン名出⼒を操作す
るピン名
outputPinStatus出⼒ピン操作プルダウン - ON:アクティ
ブ
- OFF:⾮アクテ
ィブON 対象出⼒ピン
の操作⽅法
使⽤例
"CONTEC" の "DO_0" ピンを ON にします
外部機器 IOサイドバーにて、ピン名を任意の⽂字に変更することも可能です

使⽤上の注意
"connect external io" ブロックで IO 機器を定義してから使って下さい
set external io output during
外部機器 I/O の出⼒を指定した時間だけ操作する
⼊⼒変数
変数名 名称 形式 有効範囲 初期値 内容
IONo IO番号 プルダウン 1~10 IO No.1 操作対象の IO
番号
outputPinName出⼒ピン名プルダウン 機器毎に異な
る番号が⼩さい
ピン名出⼒を操作す
るピン名
outputPinStatus出⼒ピン操作プルダウン - ON:アクティ
ブ
- OFF:⾮アクテ
ィブON 対象出⼒ピン
の操作⽅法
timerValue 待機時間プルダウン 変数表で設定
した変数名
（最⼤300 点）変数表で最初
に定義した変
数名動作を⼀時停
⽌するための
待機時間
（msec）
使⽤例
"CONTEC" の "DO_0" ピンを "100msec" の間 ON にします
外部機器 IOサイドバーにて、ピン名を任意の⽂字に変更することも可能です

使⽤上の注意
"connect external io" ブロックで IO 機器を定義してから使って下さい
set external io output until
外部機器 I/O の⼊⼒が指定した条件となるまで指定したピンの操作を継続する
⼊⼒変数
変数名 名称 形式 有効範囲 初期値 内容
IONo IO番号 プルダウン 1~10 IO No.1 操作対象の IO
番号
outputPinName出⼒ピン名プルダウン 機器毎に異な
る番号が⼩さい
ピン名出⼒を操作す
るピン名
outputPinStatus出⼒ピン操作プルダウン - ON:アクティ
ブ
- OFF:⾮アクテ
ィブON 対象出⼒ピン
の操作⽅法
inputPinStatus⼊⼒ピン操作
⽅法プルダウン - ON:アクティ
ブ
- OFF:⾮アクテ
ィブON 対象⼊⼒ピン
の状態

使⽤例
"CONTEC" の "DI_0" ピンが ON になるまで "DO_0" ピンを ON にします
外部機器 IOサイドバーにて、ピン名を任意の⽂字に変更することも可能です
使⽤上の注意
"connect external io" ブロックで IO 機器を定義してから使って下さい
external io
外部機器 I/O 状態を論理値として返す
⼊⼒変数
変数名 名称 形式 有効範囲 初期値 内容
IONo IO番号 プルダウン 1~10 IO No.1 操作対象の IO
番号

変数名 名称 形式 有効範囲 初期値 内容
inputPinName⼊⼒ピン名プルダウン 機器毎に異な
る番号が⼩さい
ピン名⼊⼒状態を取
得するピン名
使⽤例
"stop robot upon" ブロックを参照して下さい
外部機器 IOサイドバーにて、ピン名を任意の⽂字に変更することも可能です
使⽤上の注意
"connect external io" ブロックで IO 機器を定義してから使って下さい
set external io output upon
設定した条件成⽴で外部機器 I/O の出⼒を操作する
⼊⼒変数
変数名 名称 形式 有効範囲 初期値 内容
IONo IO番号 プルダウン 1~10 IO No.1 操作対象の IO
番号
outputPinName出⼒ピン名プルダウン 機器毎に異な
る番号が⼩さい
ピン名出⼒を操作す
るピン名

変数名 名称 形式 有効範囲 初期値 内容
outputPinStatus出⼒ピン操作プルダウン - ON:アクティ
ブ
- OFF:⾮アクテ
ィブ
-
100msec:100msec
間隔でON/OFF
-
300msec:300msec
間隔でON/OFF
-
500msec:500msec
間隔でON/OFF
-
1000msec:1000msec
間隔でON/OFFON 対象出⼒ピン
の操作⽅法
triggerCondition動作開始条件
詳細プルダウン‧ー:常時
‧↑:⽴ち上がり
‧↓:⽴ち下がりー 動作を開始す
るための条件
詳細
operatingCondition動作開始条件ブロック 論理値ブロッ
クなし 動作を開始す
るための条件
使⽤例
"Fairino FR" の運転状態に応じて、次のように出⼒ピンを操作します。
 - 異常停⽌中であれば、 "DO_0" ピンを 500msec 間隔で ON/OFF
 - 定常停⽌中であれば、 "DO_1" ピンを ON
 - ⾃動運転中であれば、 "DO_2" ピンを ON
外部機器 IOサイドバーにて、ピン名を任意の⽂字に変更することも可能です
使⽤上の注意

‧"connect external io" ブロックで IO 機器を定義してから使って下さい
‧"create_event"ブロック内で使って下さい
Control
loop
内包したブロック動作のループ処理を⾏う
⼊⼒変数
なし
使⽤例
"Fairino FR" が Pick&Place ループをします
使⽤上の注意
‧"loop"ブロックを 2 重すると意図しない動作となる場合があります
‧"loop"ブロックの下に他のブロックを連結することはできません
‧ループの完了は、 "return" ブロックを使⽤して下さい

return
ループ処理の最初に戻る
⼊⼒変数
なし
使⽤例
"loop"ブロックを参照して下さい
使⽤上の注意
"loop"ブロックと⼀緒に使⽤して下さい
wait timer
指定した時間だけ待機する
⼊⼒変数
変数名 名称 形式 有効範囲 初期値 内容
timerValue 待機時間プルダウン 変数表で設定
した変数名
（最⼤300 点）変数表で最初
に定義した変
数名動作を⼀時停
⽌するための
待機時間
（msec）
使⽤例
プログラムが開始すると 300msec 待機します（ "_const_***" はプルダウンメニューの下部に存在）
使⽤上の注意
‧時間は msec 単位でのみ設定できます

wait ready
Readyボタンが押下されるまで待機する
⼊⼒変数
なし
使⽤例
"wait run"ブロックを参照して下さい
使⽤上の注意
なし
wait run
Runボタンが押下されるまで待機する
⼊⼒変数
なし
使⽤例
‧"Buttonサイドバー " の "Ready" ボタンを押下すると "Fairino FR" が所定の位置まで移動します
‧"Buttonサイドバー " の "Run" ボタンを押下すると "Fairino FR" のループ動作が開始します

使⽤上の注意
なし
Logic
if
条件に応じて内包した動作ブロックを分岐する
⼊⼒変数
変数名 名称 形式 有効範囲 初期値 内容
branchCondition分岐条件ブロック 論理値ブロッ
クなし 動作を分岐す
るための条件
論理値（条件
分岐の追加
は、⻭⾞ボタ
ンから可能）

使⽤例
"Fairino FR" が Home" 位置に移動後、 "Pick TOP" 位置へ移動します（ "Place TOP" 位置には移動しません）
"Fairino FR" が Home" 位置に移動後、 "Place TOP" 位置へ移動します（ "Pick TOP" 位置には移動しません）
使⽤上の注意
‧条件分岐の最⼤数は 10 です
‧"if"ブロックの下に他のブロックを連結することはできません
‧複数の条件が同時に成⽴した場合は、⼀番最初の条件に記載した処理が優先されます
start thread
条件に応じて内包したブロック動作を開始する
⼊⼒変数

変数名 名称 形式 有効範囲 初期値 内容
startCondition開始条件ブロック 論理値ブロッ
クなし 動作を開始す
るための条件
論理値
使⽤例
プログラムの実⾏開始で、定義した変数 "cnt" に 100 を代⼊します
使⽤上の注意
‧"start thread"ブロックの下に他のブロックを連結することはできません
create event
設定した条件に応じて、動作の並⾏処理を⾏う
⼊⼒変数
なし
使⽤例
プログラムの実⾏開始で、定義した変数 "cnt" に 100 を代⼊します
使⽤上の注意
‧"start thread"ブロックの下に他のブロックを連結することはできません
wait block
接続したブロックの動作条件が成⽴するまで待機する
⼊⼒変数

変数名 名称 形式 有効範囲 初期値 内容
startCondition開始条件ブロック 論理値ブロッ
クなし 動作を開始す
るための条件
論理値
使⽤例
"logic block"ブロックを参照して下さい
使⽤上の注意
‧動作条件として接続可能なブロックは "Logic" カテゴリのみです
set flag
変数に論理値を代⼊する
⼊⼒変数
変数名 名称 形式 有効範囲 初期値 内容
dstFlagVar 代⼊先フラグ
変数プルダウン Flag変数表で設
定した変数名
（最⼤300 点）Flag変数表で最
初に定義した
変数代⼊先の論理
値型の変数
srcFlagVar 代⼊元フラグ
変数ブロック 数値ブロック なし 代⼊元の論理
値型の変数
使⽤例
"flag1"に trueを代⼊し、 "flag2" に "flag1(=true)" を代⼊します
使⽤上の注意

変数に値を格納する前に、変数表で定義して下さい
logic flag
設定した論理値を返す
⼊⼒変数
変数名 名称 形式 有効範囲 初期値 内容
boolean 論理値 プルダウン true: 真
false: 偽true true（真）また
はfalse（偽）
の値
使⽤例
"start thread"ブロックを参照して下さい
使⽤上の注意
"start thread"ブロック等と⼀緒に使⽤して下さい
logic custom flag
定義した変数の論理値を返す
⼊⼒変数
変数名 名称 形式 有効範囲 初期値 内容
flagVarフラグ変数プルダウン Flag変数表で設
定した変数名
（最⼤300 点）Flag変数表で最
初に定義した
最初の変数名論理値型の変
数
使⽤例
"set flag"ブロックを参照して下さい
使⽤上の注意
"set flag"ブロック等と⼀緒に使⽤して下さい

logic block
設定したブロックの状態を論理値として返す
⼊⼒変数
変数名 名称 形式 有効範囲 初期値 内容
blockNameブロック名プルダウン 各カテゴリに
存在する上下
接続可能なブ
ロック名moveL 状態を取得し
たいブロック
の名前
blockNoブロック番号プルダウン 各カテゴリに
存在する上下
接続可能なブ
ロック数1 状態を取得し
たいブロック
の番号
actionブロック番号プルダウン start: 動作開始
stop: 動作完了start 状態を取得し
たいブロック
の動作形態
使⽤例
"wait timer"ブロックの動作（ 1000msec 待機）が完了後、 "cnt" に 100 を代⼊します
使⽤上の注意
"wait block"ブロック等と⼀緒に使⽤して下さい
logic negate
設定した論理値の否定を返す

⼊⼒変数
変数名 名称 形式 有効範囲 初期値 内容
negateCondition論理値 ブロック 論理値ブロッ
クなし 否定したい論
理値
使⽤例
Fairino FR" が動作中に、 "IO No.1" の "DI_0" もしくは、 "DI_01" が OFF になるとロボットが停⽌します。
使⽤上の注意
なし
logic compare
設定した⽐較演算結果を論理値として返す

⼊⼒変数
変数名 名称 形式 有効範囲 初期値 内容
leftValue 左辺値 ブロック 数値ブロック なし 演算⼦で⽐較
したい数値
operator 演算⼦ プルダウン 6種類
‧=: イコール
‧!=: ノットイ
コール
‧<: ⼩なり
‧<=: ⼩なりイ
コール
‧>: ⼤なり
‧>=: ⼤なりイ
コール=(イコール ) 操作を⾏うた
めの演算⼦
rightValue 右辺値 ブロック 数値ブロック なし 演算⼦で⽐較
したい数値
使⽤例
"cnt1"に100を代⼊した後、 "cnt2" に 500 を代⼊します
使⽤上の注意
"start thread"ブロック等と⼀緒に使⽤して下さい
logic operation
設定した⽐較演算結果を論理値として返す
⼊⼒変数

変数名 名称 形式 有効範囲 初期値 内容
leftLogic 左辺論理ブロック Logicカテゴリ
のブロックなし 演算⼦で⽐較
したい論理値
operator 演算⼦ プルダウン 2種類
‧and: 論理積
‧or: 論理和=(イコール ) 操作を⾏うた
めの演算⼦
rightLogic 右辺論理ブロック Logicカテゴリ
のブロックなし 演算⼦で⽐較
したい論理値
使⽤例
"cnt1"に100を代⼊した後、 "cnt2" に 500 を代⼊します
使⽤上の注意
"start thread"ブロック等と⼀緒に使⽤して下さい
set flag upon
設定した条件成⽴で変数に論理値を代⼊する
⼊⼒変数
変数名 名称 形式 有効範囲 初期値 内容
dstValueVar 代⼊先フラグ
変数プルダウン Flag変数表で設
定した変数名
（最⼤300 点）Flag変数表で最
初に定義した
変数代⼊先の論理
値型の変数
srcValueVar 代⼊元フラグ
変数ブロック 数値ブロック なし 代⼊元の論理
値型の変数

変数名 名称 形式 有効範囲 初期値 内容
triggerCondition動作開始条件
詳細プルダウン‧ー:常時
‧↑:⽴ち上がり
‧↓:⽴ち下がりー 動作を開始す
るための条件
詳細
operatingCondition動作開始条件ブロック 論理値ブロッ
クなし 動作を開始す
るための条件
使⽤例
‧"DI_00"ピンが ON になると、 "Fairino FR" が Pick&Place 動作を⾏います
‧"DI_00"ピンが OFF になると、 "Fairino FR" が待機します
使⽤上の注意
変数に値を格納する前に、変数表で定義して下さい
Math
set number
変数に値を代⼊する

⼊⼒変数
変数名 名称 形式 有効範囲 初期値 内容
dstValueVar 代⼊先数値変
数プルダウン Number変数表
で設定した変
数名（最⼤ 300
点）Number変数表
で最初に定義
した変数代⼊先の数値
型の変数
srcValueVar 代⼊元数値変
数ブロック 数値ブロック なし 代⼊元の数値
型の変数
使⽤例
"cnt"に10を代⼊して、 500msec 待機した後、 "cnt" に 11(=10+1) を代⼊します
使⽤上の注意
変数に値を格納する前に、変数表で定義して下さい
math number
数値を返す
⼊⼒変数

変数名 名称 形式 有効範囲 初期値 内容
value 数値 キーボード 32ビット符号
付き整数0 キーボードか
ら⼊⼒可能な
任意の数値
使⽤例
"set number"ブロックを参照して下さい
使⽤上の注意
"set number"ブロック等と⼀緒に使⽤して下さい
math custom number
数値変数を指定する
⼊⼒変数
変数名 名称 形式 有効範囲 初期値 内容
valueVar 数値変数プルダウン Number変数表
で設定した変
数名（最⼤ 300
点）Number変数表
で最初に定義
した最初の変
数名数値値の変数
使⽤例
"set number"ブロックを参照して下さい
使⽤上の注意
"set number"ブロック等と⼀緒に使⽤して下さい
math arithmetic
変数に値を代⼊する
⼊⼒変数

変数名 名称 形式 有効範囲 初期値 内容
leftValue 左辺数値ブロック 数値ブロック なし 演算⼦で⽐較
したい数値
operator 演算⼦ プルダウン 5種類
‧+: 加算
‧-: 減算
‧*: 乗算
‧/: 除算
‧^: べき乗+(加算) 操作を⾏うた
めの演算⼦
rightValue 右辺数値ブロック 数値ブロック なし 演算⼦で⽐較
したい数値
使⽤例
"set number"ブロックを参照して下さい
使⽤上の注意
変数に値を格納する前に、変数表で定義して下さい
set number upon
設定した条件成⽴で変数に値を代⼊する
⼊⼒変数
変数名 名称 形式 有効範囲 初期値 内容
dstValueVar 代⼊先数値変
数プルダウン Number変数表
で設定した変
数名（最⼤ 300
点）Number変数表
で最初に定義
した変数代⼊先の数値
型の変数
srcValueVar 代⼊元数値変
数ブロック 数値ブロック なし 代⼊元の数値
型の変数
triggerCondition動作開始条件
詳細プルダウン‧ー:常時
‧↑:⽴ち上がり
‧↓:⽴ち下がりー 動作を開始す
るための条件
詳細

変数名 名称 形式 有効範囲 初期値 内容
operatingCondition動作開始条件ブロック 論理値ブロッ
クなし 動作を開始す
るための条件
使⽤例
‧"DI_00"ピンが ON になると、 "Fairino FR" が Pick&Place 動作を⾏います
‧"DI_00"ピンが OFF になると、 "Fairino FR" が待機します
使⽤上の注意
変数に値を格納する前に、変数表で定義して下さい
Error
raise error
設定したエラーが即座に発⽣する

⼊⼒変数
変数名 名称 形式 有効範囲 初期値 内容
errorMessageエラーメッセ
ージ⽂字列 最⼤50⽂字 errorMessageエラー画⾯に
表⽰したいア
ルファベット
のエラーメッ
セージ
使⽤例
"Fairino FR" の Pick&Place 回数が 5 回に到達すると、設定したエラーが発⽣します
‧"Error Reset"ボタンで発⽣しているエラーをリセットできます
‧リセット後に再開する場合は、 "Auto" ボタンを再度押下して下さい

使⽤上の注意
エラーメッセとして設定可能な⽂字列は、アルファベットのみです
raise error upon
設定した条件成⽴でエラーが発⽣する
⼊⼒変数
変数名 名称 形式 有効範囲 初期値 内容
errorMessageエラーメッセ
ージ⽂字列 最⼤50⽂字 errorMessageエラー画⾯に
表⽰したいア
ルファベット
のエラーメッ
セージ
triggerCondition動作開始条件
詳細プルダウン‧ー:常時
‧↑:⽴ち上がり
‧↓:⽴ち下がりー 動作を開始す
るための条件
詳細
operatingCondition動作開始条件ブロック 論理値ブロッ
クなし 動作を開始す
るための条件
使⽤例
"Fairino FR" の Pick&Place 回数が 5 回に到達すると、設定したエラーが発⽣します

‧"Error Reset"ボタンで発⽣しているエラーをリセットできます
‧リセット後に再開する場合は、 "Auto" ボタンを再度押下して下さい
使⽤上の注意

‧エラーメッセとして設定可能な⽂字列は、アルファベットのみです
‧"create_event"ブロック内で使って下さい
Pallet
set palet
パレット内容を設定する
⼊⼒変数
変数名 名称 形式 有効範囲 初期値 内容
rowCount ⾏番号 プルダウン 1~10 row=2 対象となるパ
レットの⾏番
号
colCount 列番号 プルダウン 1~10 col=2 対象となるパ
レットの⾏番
号
cornerPointA 点A プルダウンティーチング
表で設定した
ポイント名
（最⼤100 点）P1のポイント
名パレットの四
隅点Aの位置名
cornerPointB 点B プルダウンティーチング
表で設定した
ポイント名
（最⼤100 点）P1のポイント
名パレットの四
隅点Bの位置名
cornerPointC 点C プルダウンティーチング
表で設定した
ポイント名
（最⼤100 点）P1のポイント
名パレットの四
隅点Cの位置名
cornerPointD 点D プルダウンティーチング
表で設定した
ポイント名
（最⼤100 点）P1のポイント
名パレットの四
隅点Dの位置名
usage 使⽤⽅法プルダウン - pick:ピック⽤
- place:プレー
ス⽤pick 対象となるパ
レットの使⽤
⽅法

変数名 名称 形式 有効範囲 初期値 内容
palletNoパレット番号プルダウン 1~10 pallet No.1 対象となるパ
レットの番号
使⽤例
‧"Dobot MG400" がパレタイズ（ 3×3 ）を⾏い、パレットが空になるとエラーが発⽣します
‧パレット詳細は下図のようになっています
 - 点Aと点 B の間が "rowCount"
 - 点Aと点 C の間が "colCount"
 - ロボットハンドは、点 A → B → C の⽅向に移動します（⻘⽮印）

‧下記サイドバーから対象のパレットの残数のモニタリングと変更できます。
使⽤上の注意
"move"ブロックにパレットのオフセット設定するために、 pallet No. を選択して下さい
move next pallet
パレットの現在位置を次に進める

⼊⼒変数
変数名 名称 形式 有効範囲 初期値 内容
palletNoパレット番号プルダウン 1~10 pallet No.1 対象となるパ
レットの番号
使⽤例
"set pallet"ブロックを参照して下さい
使⽤上の注意
"set pallet"ブロックとセットで使⽤して下さい
reset pallet
パレットの現在位置を始点（点 A ）に戻す
⼊⼒変数
変数名 名称 形式 有効範囲 初期値 内容
palletNoパレット番号プルダウン 1~10 pallet No.1 対象となるパ
レットの番号
使⽤例
‧"Dobot MG400" がパレタイズ（ 3×3 ）を永続的に⾏います

使⽤上の注意
"set pallet"ブロックとセットで使⽤して下さい
Camera
connect camera
カメラPC と接続する
⼊⼒変数
変数名 名称 形式 有効範囲 初期値 内容
octetNo1 第1オクテットキーボード 8ビット符号無
し整数127 対象カメラ PC
のIPアドレス第
1オクテット
octetNo2 第2オクテットキーボード 8ビット符号無
し整数0 対象カメラ PC
のIPアドレス第
2オクテット

変数名 名称 形式 有効範囲 初期値 内容
octetNo3 第3オクテットキーボード 8ビット符号無
し整数0 対象カメラ PC
のIPアドレス第
3オクテット
octetNo4 第4オクテットキーボード 8ビット符号無
し整数1 対象カメラ PC
のIPアドレス第
4オクテット
protNoポート番号プルダウン 1024~65535 5000 対象カメラ PC
のポート番号
使⽤例
"run camera wait" または  "run camera" ブロックを参照して下さい
使⽤上の注意
"run camera wait" または  "run camera" ブロック等とセットで使⽤して下さい
run camera wait
カメラPC に実⾏命令を送信し、結果を取得するまで待機する
⼊⼒変数
変数名 名称 形式 有効範囲 初期値 内容
cameraNoカメラ番号プルダウン 1~10 camera No.1カメラの接続
を区別するた
めに付与した
任意の番号
programNoプログラム番
号プルダウン 1~100 program No.1カメラPC で実
⾏中のプログ
ラム番号。こ
の番号をカメ
ラPCに送信す
る
使⽤例
カメラNo.1 からの結果が 1(=OK) ならば、 "Hitbot Z ARM" がカメラ No.1 から取得した補正値を使って Pick&Place します

使⽤上の注意
‧"connect camera" ブロック等とセットで使⽤して下さい
‧Facilea 、 Vision Master 、 VAST Vision などのビジョンと連携が可能です
 詳細については、使⽤するビジョンの資料をご確認下さい
‧カメラ動作命令について、 TCP 経由で⽂字列形式の電⽂を送信しており、内容は下記です
 ※プログラム番号のみ、ブロックから値を変更できます
「識別ヘッダー ,プログラム番号 , コンフィグ番号 , モデル番号 , ポジション番号 CRLF 」
  例. TR1,1,0,0,0\r\n
‧カメラ結果受信について、 TCP 経由で⽂字列形式の電⽂を受信しており、内容は下記です
「識別ヘッダー , 判定結果 (OK:1, NG:2, ERR:3),x 座標 [mm],y 座標 ,z 座標 , Θ , 判定内容（テキスト） CRLF 」
  例. TR1,1,0,0,0,0,no work,\r\n
run camera
カメラPC に実⾏命令を送信する
⼊⼒変数
変数名 名称 形式 有効範囲 初期値 内容
cameraNoカメラ番号プルダウン 1~10 camera No.1カメラの接続
を区別するた

変数名 名称 形式 有効範囲 初期値 内容
めに付与した
任意の番号
programNoプログラム番
号プルダウン 1~100 program No.1カメラPC で実
⾏中のプログ
ラム番号。こ
の番号をカメ
ラPCに送信す
る
使⽤例
‧カメラ No.1 からの結果が 1(=OK) ならば、 "Hitbot Z ARM" がカメラ No.1 から取得した補正値を使って Pick&Place します
‧ロボットの Home 位置への移動とカメラの検出を、並列で⾏います
使⽤上の注意
‧"connect camera" ブロック等とセットで使⽤して下さい
‧Facilea 、 Vision Master 、 VAST Vision などのビジョンと連携が可能です
 詳細については、使⽤するビジョンの資料をご確認下さい
‧カメラ動作命令について、 TCP 経由で⽂字列形式の電⽂を送信しており、内容は下記です
 ※プログラム番号のみ、ブロックから値を変更できます
「識別ヘッダー ,プログラム番号 , コンフィグ番号 , モデル番号 , ポジション番号 CRLF 」
  例. TR1,1,0,0,0\r\n

wait camera
カメラPC から結果を取得するまで待機する
⼊⼒変数
変数名 名称 形式 有効範囲 初期値 内容
cameraNoカメラ番号プルダウン 1~10 camera No.1カメラの接続
を区別するた
めに付与した
任意の番号
使⽤例
"run camera"ブロックを参照して下さい
使⽤上の注意
"run camera"ブロック等とセットで使⽤して下さい
PLC
connect plc
PLCと接続する
⼊⼒変数
変数名 名称 形式 有効範囲 初期値 内容
makerメーカープルダウン - KEYENCE KEYENCE 対象PLC のメー
カー
octetNo1 第1オクテットキーボード 8ビット符号無
し整数192 対象PLC の IPア
ドレス第 1オク
テット

変数名 名称 形式 有効範囲 初期値 内容
octetNo2 第2オクテットキーボード 8ビット符号無
し整数168 対象PLC の IPア
ドレス第 2オク
テット
octetNo3 第3オクテットキーボード 8ビット符号無
し整数250 対象PLC の IPア
ドレス第 3オク
テット
octetNo4 第4オクテットキーボード 8ビット符号無
し整数10 対象PLC の IPア
ドレス第 4オク
テット
protNoポート番号プルダウン 1024~65535 5000 対象PLC のポー
ト番号
使⽤例
"plc bit" または  "set plc bit" ブロック等を参照して下さい
使⽤上の注意
"plc bit" または  "set plc bit" ブロック等とセットで使⽤して下さい
plc bit
PLCのbitデバイスの取得結果を論理値として返す
⼊⼒変数
変数名 名称 形式 有効範囲 初期値 内容
deviceNameデバイス名プルダウン - Rデバイス
- MRデバイスR PLCから取得す
る対象デバイ
ス名の名前
deviceWordNoデバイス WORD
番号キーボード 対象メーカー
の機種ごとに
異なる0 PLCから取得す
る対象デバイ
ス名のWORD 番
号

変数名 名称 形式 有効範囲 初期値 内容
deviceBitNoデバイス BIT 番
号プルダウン 00~16 00 PLCから取得す
る対象デバイ
ス名のBIT 番号
使⽤例
"KEYENCE" 製 PLC の "R000" デバイスが ON の時に、 "R001" デバイスを ON にします
使⽤上の注意
"connect plc"ブロックとセットで使⽤して下さい
plc word
PLCのwordデバイスの取得結果を数値として返す
⼊⼒変数
変数名 名称 形式 有効範囲 初期値 内容
deviceNameデバイス名プルダウン - DMデバイス DM PLCから取得す
る対象デバイ
ス名の名前
deviceWordNoデバイス WORD
番号キーボード 対象メーカー
の機種ごとに
異なる0 PLCから取得す
る対象デバイ
ス名のWORD 番
号
使⽤例

"KEYENCE" 製 PLC の "DM1000" デバイスが "100" の時に、 "DM1001" デバイスを "200" にします
使⽤上の注意
"connect plc"ブロックとセットで使⽤して下さい
set plc bit
PLCのbitデバイスの値を操作する
⼊⼒変数
変数名 名称 形式 有効範囲 初期値 内容
deviceNameデバイス名プルダウン - Rデバイス
- MRデバイスR PLCから取得す
る対象デバイ
ス名の名前
deviceWordNoデバイス WORD
番号キーボード 対象メーカー
の機種ごとに
異なる0 PLCから取得す
る対象デバイ
ス名のWORD 番
号
deviceBitNoデバイス BIT 番
号プルダウン 00~16 00 PLCから取得す
る対象デバイ
ス名のBIT 番号
bitStatusビット状態プルダウン - ON:アクティ
ブ
- OFF:⾮アクテ
ィブON 対象ビットデ
バイスの操作
⽅法

使⽤例
"KEYENCE" 製 PLC の "MR1000" デバイスを "ON" にします
使⽤上の注意
"connect plc"ブロックとセットで使⽤して下さい
set plc bit during
PLCのbitデバイスの値を指定した時間だけ操作する
⼊⼒変数
変数名 名称 形式 有効範囲 初期値 内容
deviceNameデバイス名プルダウン - Rデバイス
- MRデバイスR PLCから取得す
る対象デバイ
ス名の名前
deviceWordNoデバイス WORD
番号キーボード 対象メーカー
の機種ごとに
異なる0 PLCから取得す
る対象デバイ
ス名のWORD 番
号
deviceBitNoデバイス BIT 番
号プルダウン 00~16 00 PLCから取得す
る対象デバイ
ス名のBIT 番号
bitStatusビット状態プルダウン - ON:アクティ
ブ
- OFF:⾮アクテ
ィブON 対象ビットデ
バイスの操作
⽅法

変数名 名称 形式 有効範囲 初期値 内容
timerValueビット操作時
間プルダウン 変数表で設定
した変数名
（最⼤300 点）変数表で最初
に定義した変
数名ビットの操作
時間（msec）
使⽤例
"KEYENCE" 製 PLC の "MR1000" デバイスを "3 秒間 " だけ "ON" にします
使⽤上の注意
"connect plc"ブロックとセットで使⽤して下さい
set plc bit until
PLCのbitデバイスの値を指定した条件が成⽴するまで操作する
⼊⼒変数
変数名 名称 形式 有効範囲 初期値 内容
outDeviceName出⼒デバイス
名プルダウン - Rデバイス
- MRデバイスR PLCから取得す
る対象デバイ
ス名の名前
outDeviceWordNo出⼒デバイス
WORD番号キーボード 対象メーカー
の機種ごとに
異なる0 PLCから取得す
る対象デバイ
ス名のWORD 番
号
outDeviceBitNo出⼒デバイス
BIT番号プルダウン 00~16 00 PLCから取得す
る対象デバイ
ス名のBIT 番号

変数名 名称 形式 有効範囲 初期値 内容
outBitStatus 出⼒ビット状
態プルダウン - ON:アクティ
ブ
- OFF:⾮アクテ
ィブON 対象ビットデ
バイスの操作
⽅法
inDeviceName⼊⼒デバイス
名プルダウン - Rデバイス
- MRデバイスR PLCから取得す
る対象デバイ
ス名の名前
inDeviceWordNo⼊⼒デバイス
WORD番号キーボード 対象メーカー
の機種ごとに
異なる0 PLCから取得す
る対象デバイ
ス名のWORD 番
号
inDeviceBitNo ⼊⼒デバイス
BIT番号プルダウン 00~16 00 PLCから取得す
る対象デバイ
ス名のBIT 番号
inBitStatus ⼊⼒ビット状
態プルダウン - ON:アクティ
ブ
- OFF:⾮アクテ
ィブON 対象ビットデ
バイスの操作
⽅法
使⽤例
"KEYENCE" 製 PLC の "R1000" デバイスが "ON" になるまでの間 "MR1000" デバイスを "ON" にします
使⽤上の注意
"connect plc"ブロックとセットで使⽤して下さい
set plc word
PLCのbitデバイスの値を操作する

⼊⼒変数
変数名 名称 形式 有効範囲 初期値 内容
value 数値 キーボード 0~65536 0 対象デバイス
へ格納する数
値
deviceNameデバイス名プルダウン - DMデバイス DM PLCから取得す
る対象デバイ
ス名の名前
deviceWordNoデバイス WORD
番号キーボード 対象メーカー
の機種ごとに
異なる0 PLCから取得す
る対象デバイ
ス名のWORD 番
号
使⽤例
"KEYENCE" 製 PLC の "DM1000" デバイスを "123" にします
使⽤上の注意
"connect plc"ブロックとセットで使⽤して下さい
Function
define function
関数を定義する

⼊⼒変数
変数名 名称 形式 有効範囲 初期値 内容
functionName関数名 キーボード 最⼤50⽂字 do something 関数の名前
使⽤例
"call function"ブロックを参照して下さい
使⽤上の注意
‧"call function"ブロックとセットで使⽤して下さい
‧"define function" ブロックを消去すると、同⼀名の "call function" ブロックも削除されます
call function
定義した関数を呼び出す
⼊⼒変数
なし
使⽤例
"Fairino FR" が Pick&Place ループをします

使⽤上の注意
使⽤する前に "call function" ブロックで定義して下さい

