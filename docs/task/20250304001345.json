{
    "Required packages": [
      "react==18.2.0",
      "react-dom==18.2.0",
      "reactflow==11.10.1",
      "@mui/material==5.14.0",
      "@emotion/react==11.11.1",
      "@emotion/styled==11.11.0",
      "axios==1.4.0",
      "fastapi==0.95.1",
      "uvicorn==0.22.0",
      "langchain==0.0.270",
      "python-dotenv==1.0.0",
      "pydantic==1.10.7",
      "SQLAlchemy==2.0.15",
      "psycopg2-binary==2.9.6",
      "python-jose==3.3.0",
      "passlib==1.7.4",
      "bcrypt==4.0.1",
      "alembic==1.11.1",
      "i18next==23.2.6",
      "react-i18next==13.0.1",
      "zustand==4.3.9",
      "redis==4.5.5",
      "websockets==11.0.3",
      "python-multipart==0.0.6",
      "celery==5.3.1"
    ],
    "Required Other language third-party packages": [
      "LLM API (OpenAI/Azure OpenAI)",
      "TypeScript 5.0+",
      "ESLint 8.40+",
      "Prettier 2.8+",
      "Jest 29.5+",
      "React Testing Library 14.0+"
    ],
    "Logic Analysis": [
      ["frontend/src/App.tsx", "应用程序入口点，设置路由、认证状态和全局上下文"],
      ["frontend/src/components/FlowEditor/FlowEditor.tsx", "流程图编辑器核心组件，包含 Reactflow 实例和编辑器操作"],
      ["frontend/src/components/FlowEditor/CustomNodes/index.tsx", "自定义节点组件集合，实现不同类型节点的渲染和交互"],
      ["frontend/src/components/FlowEditor/CustomEdges/index.tsx", "自定义边组件集合，实现不同类型连接的渲染和交互"],
      ["frontend/src/components/Sidebar/ProjectSidebar.tsx", "项目侧边栏，显示项目和流程图列表，支持导航和管理"],
      ["frontend/src/components/Sidebar/NodeTemplateSidebar.tsx", "节点模板侧边栏，提供节点类型浏览和拖拽功能"],
      ["frontend/src/components/Sidebar/ChatSidebar.tsx", "AI 对话侧边栏，实现与 LLM 的交互和节点生成功能"],
      ["frontend/src/components/Properties/NodeProperties.tsx", "节点属性面板，显示和编辑选中节点的属性"],
      ["frontend/src/components/Properties/VariableManager.tsx", "变量管理面板，支持全局和局部变量的创建和编辑"],
      ["frontend/src/components/Properties/VersionHistory.tsx", "版本历史面板，显示流程图版本记录和支持回滚功能"],
      ["frontend/src/stores/projectStore.ts", "项目状态管理，处理项目和流程图数据"],
      ["frontend/src/stores/editorStore.ts", "编辑器状态管理，处理流程图编辑状态和操作"],
      ["frontend/src/stores/variableStore.ts", "变量状态管理，处理全局和局部变量数据"],
      ["frontend/src/stores/chatStore.ts", "对话状态管理，处理 AI 对话会话和消息数据"],
      ["frontend/src/api/projectApi.ts", "项目相关 API 请求封装"],
      ["frontend/src/api/flowApi.ts", "流程图相关 API 请求封装"],
      ["frontend/src/api/nodeApi.ts", "节点相关 API 请求封装"],
      ["frontend/src/api/variableApi.ts", "变量相关 API 请求封装"],
      ["frontend/src/api/chatApi.ts", "对话相关 API 请求封装"],
      ["backend/app/main.py", "FastAPI 应用程序入口点，设置路由和中间件"],
      ["backend/app/core/config.py", "应用配置管理，处理环境变量和系统设置"],
      ["backend/app/core/security.py", "安全相关功能，包括认证和授权逻辑"],
      ["backend/app/db/base.py", "数据库基础配置，定义 Base 类和共通模型"],
      ["backend/app/db/session.py", "数据库会话管理，处理连接和会话"],
      ["backend/app/models/user.py", "用户数据模型，定义用户表结构和关系"],
      ["backend/app/models/project.py", "项目数据模型，定义项目表结构和关系"],
      ["backend/app/models/flow.py", "流程图数据模型，定义流程图表结构和关系"],
      ["backend/app/models/node.py", "节点数据模型，定义节点表结构和关系"],
      ["backend/app/models/edge.py", "边数据模型，定义边表结构和关系"],
      ["backend/app/models/variable.py", "变量数据模型，定义变量表结构和关系"],
      ["backend/app/models/version.py", "版本数据模型，定义版本历史表结构和关系"],
      ["backend/app/models/chat.py", "对话数据模型，定义会话和消息表结构和关系"],
      ["backend/app/schemas/user.py", "用户数据验证模式，定义请求和响应数据结构"],
      ["backend/app/schemas/project.py", "项目数据验证模式，定义请求和响应数据结构"],
      ["backend/app/schemas/flow.py", "流程图数据验证模式，定义请求和响应数据结构"],
      ["backend/app/schemas/node.py", "节点数据验证模式，定义请求和响应数据结构"],
      ["backend/app/schemas/edge.py", "边数据验证模式，定义请求和响应数据结构"],
      ["backend/app/schemas/variable.py", "变量数据验证模式，定义请求和响应数据结构"],
      ["backend/app/schemas/version.py", "版本数据验证模式，定义请求和响应数据结构"],
      ["backend/app/schemas/chat.py", "对话数据验证模式，定义请求和响应数据结构"],
      ["backend/app/api/endpoints/auth.py", "认证相关 API 端点，处理登录和注册"],
      ["backend/app/api/endpoints/projects.py", "项目相关 API 端点，处理项目 CRUD 操作"],
      ["backend/app/api/endpoints/flows.py", "流程图相关 API 端点，处理流程图 CRUD 操作"],
      ["backend/app/api/endpoints/nodes.py", "节点相关 API 端点，处理节点 CRUD 操作"],
      ["backend/app/api/endpoints/edges.py", "边相关 API 端点，处理边 CRUD 操作"],
      ["backend/app/api/endpoints/variables.py", "变量相关 API 端点，处理变量 CRUD 操作"],
      ["backend/app/api/endpoints/versions.py", "版本相关 API 端点，处理版本历史操作"],
      ["backend/app/api/endpoints/chat.py", "对话相关 API 端点，处理会话和消息操作"],
      ["backend/app/services/llm_service.py", "LLM 服务，封装 LangChain 和 LLM API 交互"],
      ["backend/app/services/node_generation.py", "节点生成服务，处理自然语言到节点配置的转换"],
      ["backend/app/services/flow_execution.py", "流程图执行服务，实现流程图执行引擎"],
      ["backend/app/services/variable_resolver.py", "变量解析服务，处理变量引用和求值"]
    ],
    "Task list": [
      "backend/app/core/config.py",
      "backend/app/db/base.py",
      "backend/app/db/session.py",
      "backend/app/models/user.py",
      "backend/app/models/project.py",
      "backend/app/models/flow.py",
      "backend/app/models/node.py",
      "backend/app/models/edge.py",
      "backend/app/models/variable.py",
      "backend/app/models/version.py",
      "backend/app/models/chat.py",
      "backend/app/schemas/user.py",
      "backend/app/schemas/project.py",
      "backend/app/schemas/flow.py",
      "backend/app/schemas/node.py",
      "backend/app/schemas/edge.py",
      "backend/app/schemas/variable.py",
      "backend/app/schemas/version.py",
      "backend/app/schemas/chat.py",
      "backend/app/core/security.py",
      "backend/app/api/endpoints/auth.py",
      "backend/app/api/endpoints/projects.py",
      "backend/app/api/endpoints/flows.py",
      "backend/app/api/endpoints/nodes.py",
      "backend/app/api/endpoints/edges.py",
      "backend/app/api/endpoints/variables.py",
      "backend/app/api/endpoints/versions.py",
      "backend/app/api/endpoints/chat.py",
      "backend/app/services/llm_service.py",
      "backend/app/services/node_generation.py",
      "backend/app/main.py",
      "frontend/src/api/projectApi.ts",
      "frontend/src/api/flowApi.ts",
      "frontend/src/api/nodeApi.ts",
      "frontend/src/api/variableApi.ts",
      "frontend/src/api/chatApi.ts",
      "frontend/src/stores/projectStore.ts",
      "frontend/src/stores/editorStore.ts",
      "frontend/src/stores/variableStore.ts",
      "frontend/src/stores/chatStore.ts",
      "frontend/src/components/FlowEditor/CustomNodes/index.tsx",
      "frontend/src/components/FlowEditor/CustomEdges/index.tsx",
      "frontend/src/components/Sidebar/ProjectSidebar.tsx",
      "frontend/src/components/Sidebar/NodeTemplateSidebar.tsx",
      "frontend/src/components/Sidebar/ChatSidebar.tsx",
      "frontend/src/components/Properties/NodeProperties.tsx",
      "frontend/src/components/Properties/VariableManager.tsx",
      "frontend/src/components/Properties/VersionHistory.tsx",
      "frontend/src/components/FlowEditor/FlowEditor.tsx",
      "frontend/src/App.tsx"
    ],
    "Full API spec": {
      "openapi": "3.0.0",
      "info": {
        "title": "Visual Workflow Editor API",
        "version": "1.0.0",
        "description": "API for visual workflow editor with AI-powered node generation"
      },
      "paths": {
        "/api/auth/register": {
          "post": {
            "summary": "Register new user",
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserCreate"
                  }
                }
              }
            },
            "responses": {
              "201": {
                "description": "User created successfully",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          }
        },
        "/api/auth/login": {
          "post": {
            "summary": "Login user",
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserLogin"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "Login successful",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Token"
                    }
                  }
                }
              }
            }
          }
        },
        "/api/projects": {
          "get": {
            "summary": "Get user projects",
            "security": [{ "bearerAuth": [] }],
            "responses": {
              "200": {
                "description": "List of projects",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Project"
                      }
                    }
                  }
                }
              }
            }
          },
          "post": {
            "summary": "Create new project",
            "security": [{ "bearerAuth": [] }],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProjectCreate"
                  }
                }
              }
            },
            "responses": {
              "201": {
                "description": "Project created successfully",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Project"
                    }
                  }
                }
              }
            }
          }
        },
        "/api/projects/{project_id}": {
          "get": {
            "summary": "Get project by ID",
            "security": [{ "bearerAuth": [] }],
            "parameters": [
              {
                "name": "project_id",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Project details",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Project"
                    }
                  }
                }
              }
            }
          },
          "put": {
            "summary": "Update project",
            "security": [{ "bearerAuth": [] }],
            "parameters": [
              {
                "name": "project_id",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProjectUpdate"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "Project updated successfully",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Project"
                    }
                  }
                }
              }
            }
          },
          "delete": {
            "summary": "Delete project",
            "security": [{ "bearerAuth": [] }],
            "parameters": [
              {
                "name": "project_id",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            ],
            "responses": {
              "204": {
                "description": "Project deleted successfully"
              }
            }
          }
        },
        "/api/projects/{project_id}/flows": {
          "get": {
            "summary": "Get project flows",
            "security": [{ "bearerAuth": [] }],
            "parameters": [
              {
                "name": "project_id",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "List of flows in project",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/FlowList"
                      }
                    }
                  }
                }
              }
            }
          },
          "post": {
            "summary": "Create new flow in project",
            "security": [{ "bearerAuth": [] }],
            "parameters": [
              {
                "name": "project_id",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/FlowCreate"
                  }
                }
              }
            },
            "responses": {
              "201": {
                "description": "Flow created successfully",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Flow"
                    }
                  }
                }
              }
            }
          }
        },
        "/api/flows/{flow_id}": {
          "get": {
            "summary": "Get flow by ID",
            "security": [{ "bearerAuth": [] }],
            "parameters": [
              {
                "name": "flow_id",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Flow details with nodes and edges",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/FlowDetail"
                    }
                  }
                }
              }
            }
          },
          "put": {
            "summary": "Update flow",
            "security": [{ "bearerAuth": [] }],
            "parameters": [
              {
                "name": "flow_id",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/FlowUpdate"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "Flow updated successfully",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Flow"
                    }
                  }
                }
              }
            }
          },
          "delete": {
            "summary": "Delete flow",
            "security": [{ "bearerAuth": [] }],
            "parameters": [
              {
                "name": "flow_id",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            ],
            "responses": {
              "204": {
                "description": "Flow deleted successfully"
              }
            }
          }
        },
        "/api/flows/{flow_id}/nodes": {
          "get": {
            "summary": "Get flow nodes",
            "security": [{ "bearerAuth": [] }],
            "parameters": [
              {
                "name": "flow_id",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "List of nodes in flow",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Node"
                      }
                    }
                  }
                }
              }
            }
          },
          "post": {
            "summary": "Create node in flow",
            "security": [{ "bearerAuth": [] }],
            "parameters": [
              {
                "name": "flow_id",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NodeCreate"
                  }
                }
              }
            },
            "responses": {
              "201": {
                "description": "Node created successfully",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Node"
                    }
                  }
                }
              }
            }
          }
        },
        "/api/nodes/{node_id}": {
          "get": {
            "summary": "Get node by ID",
            "security": [{ "bearerAuth": [] }],
            "parameters": [
              {
                "name": "node_id",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Node details",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Node"
                    }
                  }
                }
              }
            }
          },
          "put": {
            "summary": "Update node",
            "security": [{ "bearerAuth": [] }],
            "parameters": [
              {
                "name": "node_id",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NodeUpdate"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "Node updated successfully",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Node"
                    }
                  }
                }
              }
            }
          },
          "delete": {
            "summary": "Delete node",
            "security": [{ "bearerAuth": [] }],
            "parameters": [
              {
                "name": "node_id",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            ],
            "responses": {
              "204": {
                "description": "Node deleted successfully"
              }
            }
          }
        },
        "/api/flows/{flow_id}/edges": {
          "get": {
            "summary": "Get flow edges",
            "security": [{ "bearerAuth": [] }],
            "parameters": [
              {
                "name": "flow_id",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "List of edges in flow",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Edge"
                      }
                    }
                  }
                }
              }
            }
          },
          "post": {
            "summary": "Create edge in flow",
            "security": [{ "bearerAuth": [] }],
            "parameters": [
              {
                "name": "flow_id",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/EdgeCreate"
                  }
                }
              }
            },
            "responses": {
              "201": {
                "description": "Edge created successfully",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Edge"
                    }
                  }
                }
              }
            }
          }
        },
        "/api/edges/{edge_id}": {
          "get": {
            "summary": "Get edge by ID",
            "security": [{ "bearerAuth": [] }],
            "parameters": [
              {
                "name": "edge_id",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Edge details",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Edge"
                    }
                  }
                }
              }
            }
          },
          "put": {
            "summary": "Update edge",
            "security": [{ "bearerAuth": [] }],
            "parameters": [
              {
                "name": "edge_id",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/EdgeUpdate"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "Edge updated successfully",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Edge"
                    }
                  }
                }
              }
            }
          },
          "delete": {
            "summary": "Delete edge",
            "security": [{ "bearerAuth": [] }],
            "parameters": [
              {
                "name": "edge_id",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            ],
            "responses": {
              "204": {
                "description": "Edge deleted successfully"
              }
            }
          }
        },
        "/api/flows/{flow_id}/variables": {
          "get": {
            "summary": "Get flow variables",
            "security": [{ "bearerAuth": [] }],
            "parameters": [
              {
                "name": "flow_id",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "List of variables in flow",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Variable"
                      }
                    }
                  }
                }
              }
            }
          },
          "post": {
            "summary": "Create variable in flow",
            "security": [{ "bearerAuth": [] }],
            "parameters": [
              {
                "name": "flow_id",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/VariableCreate"
                  }
                }
              }
            },
            "responses": {
              "201": {
                "description": "Variable created successfully",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Variable"
                    }
                  }
                }
              }
            }
          }
        },
        "/api/variables/{variable_id}": {
          "get": {
            "summary": "Get variable by ID",
            "security": [{ "bearerAuth": [] }],
            "parameters": [
              {
                "name": "variable_id",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Variable details",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Variable"
                    }
                  }
                }
              }
            }
          },
          "put": {
            "summary": "Update variable",
            "security": [{ "bearerAuth": [] }],
            "parameters": [
              {
                "name": "variable_id",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/VariableUpdate"
                }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Variable updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Variable"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete variable",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "variable_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Variable deleted successfully"
          }
        }
      }
    },
    "/api/flows/{flow_id}/versions": {
      "get": {
        "summary": "Get flow versions",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "flow_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of versions for a flow",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Version"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create flow version",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "flow_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VersionCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Version created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Version"
                }
              }
            }
          }
        }
      }
    },
    "/api/flows/{flow_id}/versions/{version_id}/restore": {
      "post": {
        "summary": "Restore flow to version",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "flow_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "version_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Flow restored to version successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlowDetail"
                }
              }
            }
          }
        }
      }
    },
    "/api/flows/{flow_id}/export": {
      "get": {
        "summary": "Export flow",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "flow_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Exported flow data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlowExport"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{project_id}/import": {
      "post": {
        "summary": "Import flow to project",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FlowImport"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Flow imported successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Flow"
                }
              }
            }
          }
        }
      }
    },
    "/api/chat/sessions": {
      "get": {
        "summary": "Get chat sessions",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "flow_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of chat sessions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChatSession"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create chat session",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatSessionCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Chat session created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatSession"
                }
              }
            }
          }
        }
      }
    },
    "/api/chat/sessions/{session_id}/messages": {
      "get": {
        "summary": "Get chat session messages",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of chat messages",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChatMessage"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Send chat message",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatMessageCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Message sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/chat/generate-node": {
      "post": {
        "summary": "Generate node from natural language",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NodeGenerationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Node generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeGenerationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/chat/update-node/{node_id}": {
      "post": {
        "summary": "Update node from natural language",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "node_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NodeUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Node updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeGenerationResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "UserCreate": {
        "type": "object",
        "required": ["username", "email", "password"],
        "properties": {
          "username": {
            "type": "string",
            "minLength": 3,
            "maxLength": 50
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "password": {
            "type": "string",
            "minLength": 8
          }
        }
      },
      "UserLogin": {
        "type": "object",
        "required": ["username", "password"],
        "properties": {
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "username": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Token": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string"
          },
          "token_type": {
            "type": "string",
            "enum": ["bearer"]
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        }
      },
      "ProjectCreate": {
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "description": {
            "type": "string",
            "maxLength": 500
          }
        }
      },
      "ProjectUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "description": {
            "type": "string",
            "maxLength": 500
          }
        }
      },
      "Project": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "owner_id": {
            "type": "string",
            "format": "uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "FlowCreate": {
        "type": "object",
        "required": ["name", "project_id"],
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "description": {
            "type": "string",
            "maxLength": 500
          },
          "project_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "FlowUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "description": {
            "type": "string",
            "maxLength": 500
          }
        }
      },
      "FlowList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "project_id": {
            "type": "string",
            "format": "uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "node_count": {
            "type": "integer"
          },
          "edge_count": {
            "type": "integer"
          }
        }
      },
      "Flow": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "project_id": {
            "type": "string",
            "format": "uuid"
          },
          "version": {
            "type": "integer"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "FlowDetail": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "project_id": {
            "type": "string",
            "format": "uuid"
          },
          "version": {
            "type": "integer"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "nodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Node"
            }
          },
          "edges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Edge"
            }
          },
          "variables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Variable"
            }
          }
        }
      },
      "FlowExport": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "nodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Node"
            }
          },
          "edges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Edge"
            }
          },
          "variables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Variable"
            }
          },
          "export_date": {
            "type": "string",
            "format": "date-time"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "FlowImport": {
        "type": "object",
        "required": ["name", "nodes", "edges"],
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "description": {
            "type": "string",
            "maxLength": 500
          },
          "nodes": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "edges": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        }
      },
      "NodeCreate": {
        "type": "object",
        "required": ["type", "position", "flow_id"],
        "properties": {
          "type": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "flow_id": {
            "type": "string",
            "format": "uuid"
          },
          "position": {
            "type": "object",
            "properties": {
              "x": {
                "type": "number"
              },
              "y": {
                "type": "number"
              }
            }
          },
          "data": {
            "type": "object",
            "additionalProperties": true
          },
          "style": {
            "type": "object",
            "additionalProperties": true
          }
        }
      },
      "NodeUpdate": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string"
          },
          "position": {
            "type": "object",
            "properties": {
              "x": {
                "type": "number"
              },
              "y": {
                "type": "number"
              }
            }
          },
          "data": {
            "type": "object",
            "additionalProperties": true
          },
          "style": {
            "type": "object",
            "additionalProperties": true
          }
        }
      },
      "Node": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "flow_id": {
            "type": "string",
            "format": "uuid"
          },
          "position": {
            "type": "object",
            "properties": {
              "x": {
                "type": "number"
              },
              "y": {
                "type": "number"
              }
            }
          },
          "data": {
            "type": "object",
            "additionalProperties": true
          },
          "style": {
            "type": "object",
            "additionalProperties": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "EdgeCreate": {
        "type": "object",
        "required": ["source_id", "target_id", "flow_id"],
        "properties": {
          "source_id": {
            "type": "string",
            "format": "uuid"
          },
          "target_id": {
            "type": "string",
            "format": "uuid"
          },
          "source_handle": {
            "type": "string"
          },
          "target_handle": {
            "type": "string"
          },
          "flow_id": {
            "type": "string",
            "format": "uuid"
          },
          "label": {
            "type": "string"
          },
          "style": {
            "type": "object",
            "additionalProperties": true
          },
          "condition": {
            "type": "string"
          },
          "priority": {
            "type": "integer"
          }
        }
      },
      "EdgeUpdate": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string"
          },
          "style": {
            "type": "object",
            "additionalProperties": true
          },
          "condition": {
            "type": "string"
          },
          "priority": {
            "type": "integer"
          }
        }
      },
      "Edge": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "source_id": {
            "type": "string",
            "format": "uuid"
          },
          "target_id": {
            "type": "string",
            "format": "uuid"
          },
          "source_handle": {
            "type": "string"
          },
          "target_handle": {
            "type": "string"
          },
          "flow_id": {
            "type": "string",
            "format": "uuid"
          },
          "label": {
            "type": "string"
          },
          "style": {
            "type": "object",
            "additionalProperties": true
          },
          "condition": {
            "type": "string"
          },
          "priority": {
            "type": "integer"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "VariableCreate": {
        "type": "object",
        "required": ["name", "scope", "flow_id"],
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "scope": {
            "type": "string",
            "enum": ["global", "node"]
          },
          "type": {
            "type": "string",
            "enum": ["string", "number", "boolean", "object", "array"]
          },
          "default_value": {
            "oneOf": [
              { "type": "string" },
              { "type": "number" },
              { "type": "boolean" },
              { "type": "object" },
              { "type": "array" },
              { "type": "null" }
            ]
          },
          "description": {
            "type": "string",
            "maxLength": 500
          },
          "flow_id": {
            "type": "string",
            "format": "uuid"
          },
          "node_id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "is_required": {
            "type": "boolean",
            "default": false
          },
          "validation_rules": {
            "type": "object",
            "additionalProperties": true
          }
        }
      },
      "VariableUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "type": {
            "type": "string",
            "enum": ["string", "number", "boolean", "object", "array"]
          },
          "default_value": {
            "oneOf": [
              { "type": "string" },
              { "type": "number" },
              { "type": "boolean" },
              { "type": "object" },
              { "type": "array" },
              { "type": "null" }
            ]
          },
          "value": {
            "oneOf": [
              { "type": "string" },
              { "type": "number" },
              { "type": "boolean" },
              { "type": "object" },
              { "type": "array" },
              { "type": "null" }
            ]
          },
          "description": {
            "type": "string",
            "maxLength": 500
          },
          "is_required": {
            "type": "boolean"
          },
          "validation_rules": {
            "type": "object",
            "additionalProperties": true
          }
        }
      },
      "Variable": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "scope": {
            "type": "string",
            "enum": ["global", "node"]
          },
          "type": {
            "type": "string",
            "enum": ["string", "number", "boolean", "object", "array"]
          },
          "default_value": {
            "oneOf": [
              { "type": "string" },
              { "type": "number" },
              { "type": "boolean" },
              { "type": "object" },
              { "type": "array" },
              { "type": "null" }
            ]
          },
          "value": {
            "oneOf": [
              { "type": "string" },
              { "type": "number" },
              { "type": "boolean" },
              { "type": "object" },
              { "type": "array" },
              { "type": "null" }
            ]
          },
          "description": {
            "type": "string"
          },
          "flow_id": {
            "type": "string",
            "format": "uuid"
          },
          "node_id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "is_required": {
            "type": "boolean"
          },
          "validation_rules": {
            "type": "object",
            "additionalProperties": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "VersionCreate": {
        "type": "object",
        "required": ["comment"],
        "properties": {
          "comment": {
            "type": "string",
            "minLength": 1,
            "maxLength": 500
          }
        }
      },
      "Version": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "flow_id": {
            "type": "string",
            "format": "uuid"
          },
          "comment": {
            "type": "string"
          },
          "created_by": {
            "type": "string",
            "format": "uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ChatSessionCreate": {
        "type": "object",
        "properties": {
          "flow_id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        }
      },
      "ChatSession": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "user_id": {
            "type": "string",
            "format": "uuid"
          },
          "flow_id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ChatMessageCreate": {
        "type": "object",
        "required": ["content"],
        "properties": {
          "content": {
            "type": "string",
            "minLength": 1
          },
          "metadata": {
            "type": "object",
            "additionalProperties": true
          }
        }
      },
      "ChatMessage": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "session_id": {
            "type": "string",
            "format": "uuid"
          },
          "content": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "enum": ["user", "assistant"]
          },
          "metadata": {
            "type": "object",
            "additionalProperties": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "NodeGenerationRequest": {
        "type": "object",
        "required": ["prompt", "flow_id"],
        "properties": {
          "prompt": {
            "type":"string",
              "minLength": 1
            },
            "flow_id": {
              "type": "string",
              "format": "uuid"
            },
            "position": {
              "type": "object",
              "properties": {
                "x": {
                  "type": "number"
                },
                "y": {
                  "type": "number"
                }
              }
            }
          }
        },
        "NodeGenerationResponse": {
          "type": "object",
          "properties": {
            "node": {
              "$ref": "#/components/schemas/Node"
            },
            "explanation": {
              "type": "string"
            }
          }
        },
        "NodeUpdateRequest": {
          "type": "object",
          "required": ["prompt"],
          "properties": {
            "prompt": {
              "type": "string",
              "minLength": 1
            }
          }
        }
      },
      "securitySchemes": {
        "bearerAuth": {
          "type": "http",
          "scheme": "bearer",
          "bearerFormat": "JWT"
        }
      }
    }
  },
  "Shared Knowledge": "系统将采用基于项目和流程图的多层次结构，每个用户可以创建多个项目，每个项目下可以包含多个流程图。流程图由节点和边组成，并支持全局变量和节点局部变量。系统使用JWT进行认证，采用基于角色和资源的权限控制机制。Reactflow负责流程图的可视化和交互，LangChain结合LLM API实现AI辅助节点生成和修改功能。所有UI文本和系统消息支持中文、英文和日文三种语言。为确保数据安全和操作可靠性，系统实现了完整的版本控制和历史记录功能。",
  "Anything UNCLEAR": "1. LLM API的具体实现细节需要进一步明确，包括选用哪个提供商、如何构建有效的prompt、如何处理上下文和如何优化生成结果的质量。\n2. 机器人操作代码的具体API文档和参数定义需要获取完整版本，以确保生成的节点能够正确配置和执行。\n3. 权限控制的具体实现细节，特别是针对团队协作场景的细粒度权限和资源共享机制。\n4. 流程图执行引擎的具体实现策略和技术选型，包括如何处理条件分支、循环和并行执行等高级功能。"
}