创建一个基于 React 前端和 FastAPI 后端的网站，核心功能是提供一个以 n8n 为灵感、基于 Reactflow 的可视化流程图交互界面。
          并且提供利用llm api结合langchain进行节点的生成/修改功能。
          请遵循以下需求进行设计和开发：

    流程图交互界面
        利用 Reactflow 构建直观的流程图界面，充分借鉴n8n的设计理念和技术栈（React + Reactflow + FastAPI/Python）。
        n8n的GUI 特色有：
          可视化节点编排：
          基于节点（Node）的拖放式界面，每个节点代表一个操作（如 API 请求、数据处理、条件分支等），通过连线构建自动化流程。
          实时调试与日志：
          提供实时执行日志和错误追踪功能，可直接在 GUI 中查看每个节点的输入/输出数据，便于调试。
          数据可视化：
          支持对节点间的数据流进行可视化预览（如 JSON 结构展开），降低非技术用户理解数据流转的门槛
        框架特色有：
          灵活的自定义逻辑：
          允许通过 JavaScript 代码节点（Code Node）插入自定义脚本，结合内置节点实现复杂逻辑。
          错误处理机制：
          支持重试机制、错误路由（将失败任务导向指定节点），提升流程鲁棒性。
        窗口的右边侧边栏可以选择已有节点，创建新节点，打开全局变量等等功能。
        窗口的中央主界面是流程图，其中的每个节点代表预定义的机器人操作代码，用于执行特定任务。
        节点类型不是固定的：初始阶段生成一组简单的示例节点，比如movl,movj,loop等等。
        在 admin 模式下，管理员可以直接通过页面操作来添加或删除节点类型，以便灵活扩展和定义新的操作逻辑。

    自然语言生成/修改节点功能
        窗口的左侧边栏集成一个 LLM 对话接口模块，允许用户通过自然语言描述来生成新节点或修改现有节点及其参数，以及节点之间的连接关系。
        系统应自动解析用户输入的自然语言，将描述转换为相应的节点操作和参数更新，并确保所有生成的节点操作和参数符合预定义的机器人代码逻辑。

    其他基础功能
        全局变量：以json格式保存全局外部文件，提供比如外部坐标，机器人，相机的ip地址等数据。
        窗口的上侧边栏提供设置，保存读取当前会话（会话包括流程图修改历史和对话进行历史，设置等等）等功能。
        支持用户登录、注册，以及保存和管理用户的聊天历史（与流程图操作无关的基本功能），但项目重心主要放在流程图交互和自然语言驱动的节点生成/修改功能上。

    多语言功能  
    在设置栏中提供语言选项，对所有交互内容都要求提供中，日，英三种语言的内容，随着语言选项切换。

请在项目开发过程中充分利用上述的现有技术栈和设计思路，同时根据需求对逻辑进行定制化改造，实现一个灵活、可扩展的机器人操作工作流系统。开发过程中的所有讨论都用中文进行。

prompt类似：
content_mg400_en = ("This assistant generates Python code for robot pick-and-place tasks by using the provided API "
                    "and following the example program. It must understand the internal structure of the API and use "
                    "the following imports: from dobot_api import DobotApiDashboard, DobotApi, DobotApiMove and "
                    "def connect_robot() with right ip and port.At the start of the task, the robot must be activated, and there should be a "
                    "2-second wait. The robot's speed should be adjusted to 50% of its maximum speed.Strict "
                    "adherence to the API usage methods is required, and only the functions provided in the API "
                    "should be used to generate the program. Do not use any other unspecified functions, as this will "
                    "cause errors.After each motion command, a synchronization command must be used to ensure the "
                    "robot reaches the specified position before unlocking the next step. Otherwise, it will result "
                    "in discrepancies between the program and the robot's movement.")

content_mg400_pick_and_place_en = ('Pick-and-place task: Assume there are k pick coordinates.'
                                   '1.First, move to a position 20 cm directly above the starting pick coordinate, then move 20 cm downward.'
                                   '2.Use the relevant function from mg400_api to activate the specified digital output.'
                                   '3.Ascend 20 cm from the current position.'
                                   '4.Move to a position 20 cm directly above the placement coordinate, then move 20 cm downward.'
                                   '5.Use the relevant function from mg400_api to deactivate the specified digital output.'
                                   '6.Ascend 20 cm from the current position.'
                                   '7.Return the string [Task k completed] for the k-th task.'
                                   'After completing all tasks in the loop, reset the value of k to zero and return the string [All tasks completed]. '
                                   'Repeat this program from the beginning.')

code_check_example_en = ("Sync() belongs to the DobotApiMove class, not the DobotApi class.SpeedFactor() belongs to "
                         "the DobotApiDashboard class, not the DobotApiMove class.  The MovL and MovJ commands"
                         "must accept four individual numerical values rather than an array.")

content_mg400_code_check_en = (" Analyze and report whether each line of code in the program uses functions from "
                               "DobotApiDashboard, DobotApi, and DobotApiMove that exist in their respective function "
                               "lists as documented in the API.The function names, number of parameters, "
                               "and parameter types must strictly match the API documentation.If there are any "
                               "errors, report the locations of the errors and provide a corrected version of the "
                               "program.For example:" + code_check_example_en)

生成的流程图类似：
```xml
<xml xmlns="https://developers.google.com/blockly/xml">
  <block type="select_robot" id="`!K|NK,j98vn?R5_Q}:*" x="10" y="10" data-blockNo="1">
    <field name="robotName">mg400</field>
    <next>
      <block type="set_motor" id="1#F9+8V3qfh;R*LS1pE`" data-blockNo="1">
        <field name="state_list">on</field>
        <next>
          <block type="moveL" id="ur2s72EA%*kdo0=j`^lh" data-blockNo="1">
            <field name="point_name_list">P1</field>
            <field name="control_x">disable</field>
            <field name="control_y">disable</field>
            <field name="control_z">enable</field>
            <field name="control_rz">disable</field>
            <field name="control_ry">disable</field>
            <field name="control_rx">disable</field>
            <field name="pallet_list">none</field>
            <field name="camera_list">none</field>
            <next>
              <block type="moveL" id="P}6-8`]@{LLUB?~}uPOB" data-blockNo="2">
                <field name="point_name_list">P1</field>
                <field name="control_x">enable</field>
                <field name="control_y">enable</field>
                <field name="control_z">disable</field>
                <field name="control_rz">enable</field>
                <field name="control_ry">enable</field>
                <field name="control_rx">enable</field>
                <field name="pallet_list">none</field>
                <field name="camera_list">none</field>
                <next>
                  <block type="loop" id="IuH+ylWnHeN#xo?=OcAq" data-blockNo="1">
                    <statement name="DO">
                      <block type="moveL" id="F(H0b$yT:VIs;!XC8Ak5" data-blockNo="3">
                        <field name="point_name_list">P2</field>
                        <field name="control_x">enable</field>
                        <field name="control_y">enable</field>
                        <field name="control_z">enable</field>
                        <field name="control_rz">enable</field>
                        <field name="control_ry">enable</field>
                        <field name="control_rx">enable</field>
                        <field name="pallet_list">none</field>
                        <field name="camera_list">none</field>
                        <next>
                          <block type="moveL" id="pfz%+Xs;L*/b-3uv3:b]" data-blockNo="4">
                            <field name="point_name_list">P3</field>
                            <field name="control_x">enable</field>
                            <field name="control_y">enable</field>
                            <field name="control_z">enable</field>
                            <field name="control_rz">enable</field>
                            <field name="control_ry">enable</field>
                            <field name="control_rx">enable</field>
                            <field name="pallet_list">none</field>
                            <field name="camera_list">none</field>
                            <next>
                              <block type="moveL" id=":Bs~t0V:#VLk;-0ISq`k" data-blockNo="5">
                                <field name="point_name_list">P2</field>
                                <field name="control_x">enable</field>
                                <field name="control_y">enable</field>
                                <field name="control_z">enable</field>
                                <field name="control_rz">enable</field>
                                <field name="control_ry">enable</field>
                                <field name="control_rx">enable</field>
                                <field name="pallet_list">none</field>
                                <field name="camera_list">none</field>
                                <next>
                                  <block type="moveL" id=",VPD+j8pOUIY1PcE-?K/" data-blockNo="6">
                                    <field name="point_name_list">P4</field>
                                    <field name="control_x">enable</field>
                                    <field name="control_y">enable</field>
                                    <field name="control_z">enable</field>
                                    <field name="control_rz">enable</field>
                                    <field name="control_ry">enable</field>
                                    <field name="control_rx">enable</field>
                                    <field name="pallet_list">none</field>
                                    <field name="camera_list">none</field>
                                    <next>
                                      <block type="moveL" id=")C9D!JU+mp4Pz6r)*H^~" data-blockNo="7">
                                        <field name="point_name_list">P5</field>
                                        <field name="control_x">enable</field>
                                        <field name="control_y">enable</field>
                                        <field name="control_z">enable</field>
                                        <field name="control_rz">enable</field>
                                        <field name="control_ry">enable</field>
                                        <field name="control_rx">enable</field>
                                        <field name="pallet_list">none</field>
                                        <field name="camera_list">none</field>
                                        <next>
                                          <block type="moveL" id="U*;(ftu*jf0pZG(:#j~," data-blockNo="8">
                                            <field name="point_name_list">P4</field>
                                            <field name="control_x">enable</field>
                                            <field name="control_y">enable</field>
                                            <field name="control_z">enable</field>
                                            <field name="control_rz">enable</field>
                                            <field name="control_ry">enable</field>
                                            <field name="control_rx">enable</field>
                                            <field name="pallet_list">none</field>
                                            <field name="camera_list">none</field>
                                            <next>
                                              <block type="return" id="dlcrO!.,mu[gf1CS^m|p" data-blockNo="1"></block>
                                            </next>
                                          </block>
                                        </next>
                                      </block>
                                    </next>
                                  </block>
                                </next>
                              </block>
                            </next>
                          </block>
                        </next>
                      </block>
                    </statement>
                  </block>
                </next>
              </block>
            </next>
          </block>
        </next>
      </block>
    </next>
  </block>
</xml>
```
生成的代码类似：
```python
import json
import time
from dobot_api import DobotApiDashboard, DobotApiMove

# Function to connect to the robot
def connect_robot(ip, port):
    dashboard = DobotApiDashboard(ip, port)
    move = DobotApiMove(ip, port)
    return dashboard, move

# Load points from JSON file
def load_points(file_path):
    with open(file_path, 'r') as file:
        points = json.load(file)
    return points

# Main pick-and-place function
def pick_and_place_task(dashboard, move, pick_points, place_points, do_pin):
    k = 0  # Counter for tasks
    while True:
        for pick, place in zip(pick_points, place_points):
            # Move to 40 cm above the pick position
            x, y, z, r = float(pick['x']), float(pick['y']), float(pick['z']) + 40, float(pick['r'])
            move.MovJ(x, y, z, r)
            move.Sync()  # Synchronize to ensure the robot reaches the position

            # Move down to the pick position
            z = float(pick['z'])
            move.MovJ(x, y, z, r)
            move.Sync()

            # Activate digital output (DO=1) and wait 0.2 seconds
            dashboard.DO(do_pin, 1)
            time.sleep(0.2)

            # Ascend 40 cm from the pick position
            z += 40
            move.MovJ(x, y, z, r)
            move.Sync()

            # Move to 40 cm above the place position
            x, y, z, r = float(place['x']), float(place['y']), float(place['z']) + 40, float(place['r'])
            move.MovJ(x, y, z, r)
            move.Sync()

            # Move down to the place position
            z = float(place['z'])
            move.MovJ(x, y, z, r)
            move.Sync()

            # Deactivate digital output (DO=0) and wait 0.2 seconds
            dashboard.DO(do_pin, 0)
            time.sleep(0.2)

            # Ascend 40 cm from the place position
            z += 40
            move.MovJ(x, y, z, r)
            move.Sync()

            # Increment task counter and print completion message
            k += 1
            print(f"[Task {k} completed]")

        # Reset task counter and print all tasks completed
        k = 0
        print("[All tasks completed]")

        # Swap pick and place positions for the next iteration
        pick_points, place_points = place_points, pick_points

# Main program
if __name__ == "__main__":
    # Robot IP and port
    ip = "192.168.250.101"
    port = 29999

    # Connect to the robot
    dashboard, move = connect_robot(ip, port)

    # Activate the robot and wait 2 seconds
    dashboard.EnableRobot()
    time.sleep(2)

    # Set robot speed to 50%
    dashboard.SpeedFactor(50)

    # Load points from JSON file
    points = load_points('./generated_points.json')
    pick_points = points['groups'][0]['coordinates']
    place_points = points['groups'][1]['coordinates']

    # Start the pick-and-place task
    pick_and_place_task(dashboard, move, pick_points, place_points, do_pin=1)
```