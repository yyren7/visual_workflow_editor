sequenceDiagram
    participant UI as UserInterface
    participant FE as FlowEditor (Reactflow)
    participant AppAPI as FastAPIApp (app module)
    participant AppServices as AppBusinessServices (app module)
    participant LCChat as LangchainChatService (langchainchat module)
    participant DB as Database

    %% 用户登录流程
    UI->>AppAPI: POST /api/auth/login(credentials)
    AppAPI->>AppServices: authenticateUser(credentials)
    AppServices->>DB: validateCredentials(username, password_hash)
    DB-->>AppServices: authenticationResult
    AppServices-->>AppAPI: userDetails, token
    AppAPI-->>UI: authToken + userData

    %% 加载项目列表
    UI->>AppAPI: GET /api/projects/
    AppAPI->>AppServices: getUserProjects(userId)
    AppServices->>DB: queryProjects(userId)
    DB-->>AppServices: projectsList
    AppServices-->>AppAPI: projectsList
    AppAPI-->>UI: projectsList

    %% 创建新项目
    UI->>AppAPI: POST /api/projects/(projectData)
    AppAPI->>AppServices: createNewProject(userId, projectData)
    AppServices->>DB: saveProject(projectDataWithOwner)
    DB-->>AppServices: newProject
    AppServices-->>AppAPI: newProject
    AppAPI-->>UI: projectDetails

    %% 加载流程图
    UI->>AppAPI: GET /api/flows/{flowId}
    AppAPI->>AppServices: getFlowDetails(flowId, userId)
    AppServices->>DB: queryFlow(flowId)
    DB-->>AppServices: flowData (nodes, edges, variables)
    AppServices-->>AppAPI: flowData
    AppAPI-->>UI: flowData
    UI->>FE: loadFlow(flowData)

    %% 添加节点 - 通过模板 (假设模板信息已加载或通过另一API获取)
    UI->>FE: addNodeFromTemplate(templateId, position)
    FE->>AppAPI: POST /api/flows/{flowId}/nodes (nodeData)
    AppAPI->>AppServices: createNodeInFlow(flowId, nodeData)
    AppServices->>DB: saveNode(nodeData)
    DB-->>AppServices: newNodeWithId
    AppServices-->>AppAPI: newNodeWithId
    AppAPI-->>FE: newNodeWithId
    FE-->>UI: updateCanvas()

    %% 编辑节点属性
    UI->>FE: selectNode(nodeId)
    FE-->>UI: show nodeProperties
    UI->>FE: user edits properties
    FE->>AppAPI: PUT /api/nodes/{nodeId} (updatedProperties)
    AppAPI->>AppServices: updateNodeProperties(nodeId, updatedProperties)
    AppServices->>DB: updateNodeRecord(nodeId, updatedProperties)
    DB-->>AppServices: success
    AppServices-->>AppAPI: success
    AppAPI-->>FE: successConfirmation
    FE-->>UI: updateCanvas()

    %% 连接节点 (创建边)
    UI->>FE: connectNodes(sourceId, targetId, sourceHandle, targetHandle)
    FE->>AppAPI: POST /api/flows/{flowId}/edges (edgeData)
    AppAPI->>AppServices: createEdgeInFlow(flowId, edgeData)
    AppServices->>DB: saveEdge(edgeData)
    DB-->>AppServices: newEdgeWithId
    AppServices-->>AppAPI: newEdgeWithId
    AppAPI-->>FE: newEdgeWithId
    FE-->>UI: updateCanvas()

    %% 使用AI助手生成节点
    UI->>AppAPI: POST /api/chat/generate-node (prompt, flowContext)
    AppAPI->>AppServices: handleGenerateNodeRequest(prompt, flowContext)
    AppServices->>LCChat: generate_node_config(prompt, flowContext) # 调用 langchainchat 服务
    LCChat->>LCChat: (Internal LangChain logic: prompts, chains, LLM call)
    LCChat-->>AppServices: generatedNodeConfig
    AppServices->>AppServices: validateNodeConfig(generatedNodeConfig)
    AppServices->>DB: saveNode(generatedNodeConfig)
    DB-->>AppServices: newNodeWithId
    AppServices-->>AppAPI: newNodeWithId
    AppAPI-->>UI: newNodeData # 返回新节点信息给前端
    UI->>FE: addNode(newNodeData)
    FE-->>UI: updateCanvas()

    %% 使用AI助手修改节点
    UI->>AppAPI: POST /api/chat/update-node (prompt, nodeId, nodeContext)
    AppAPI->>AppServices: handleUpdateNodeRequest(prompt, nodeId, nodeContext)
    AppAPI->>LCChat: generate_node_update(prompt, nodeContext) # 调用 langchainchat 服务
    LCChat->>LCChat: (Internal LangChain logic: prompts, chains, LLM call)
    LCChat-->>AppServices: updatedNodeConfig
    AppServices->>AppServices: validateNodeUpdate(updatedNodeConfig)
    AppServices->>DB: updateNodeRecord(nodeId, updatedNodeConfig)
    DB-->>AppServices: success
    AppServices-->>AppAPI: updatedNodeData
    AppAPI-->>UI: updatedNodeData # 返回更新后的节点信息
    UI->>FE: updateNode(updatedNodeData)
    FE-->>UI: updateCanvas()

    %% 管理全局变量
    UI->>AppAPI: POST /api/flows/{flowId}/variables (variableData)
    AppAPI->>AppServices: createGlobalVariable(flowId, variableData)
    AppServices->>DB: saveVariable(variableData)
    DB-->>AppServices: newVariableWithId
    AppServices-->>AppAPI: newVariableWithId
    AppAPI-->>UI: variableDetails

    UI->>AppAPI: PUT /api/variables/{variableId} (updatedData)
    AppAPI->>AppServices: updateGlobalVariable(variableId, updatedData)
    AppServices->>DB: updateVariableRecord(variableId, updatedData)
    DB-->>AppServices: success
    AppServices-->>AppAPI: success
    AppAPI-->>UI: updatedVariable

    %% 保存流程图 (假设自动保存或显式触发)
    FE->>AppAPI: PUT /api/flows/{flowId} (fullFlowData)
    AppAPI->>AppServices: saveFullFlow(flowId, fullFlowData)
    AppServices->>DB: updateFlowRecord(flowId, fullFlowData)
    DB-->>AppServices: success
    AppServices-->>AppAPI: success
    AppAPI-->>FE: saveSuccessConfirmation

    %% 创建版本快照 (可选)
    UI->>AppAPI: POST /api/flows/{flowId}/versions (comment)
    AppAPI->>AppServices: createVersionSnapshot(flowId, comment)
    AppAPI->>DB: saveVersionSnapshot(flowId, currentFlowData, comment)
    DB-->>AppAPI: versionId
    AppAPI-->>UI: versionDetails

    %% 执行流程图 (简化流程)
    UI->>AppAPI: POST /api/flows/{flowId}/execute (inputParameters)
    AppAPI->>AppServices: startFlowExecution(flowId, inputParameters)
    AppAPI->>AppServices: (Initialize execution engine, execute nodes...)
    alt May involve LCChat for specific node execution
        AppAPI->>LCChat: execute_ai_node(...)
        LCChat-->>AppAPI: nodeResult
    end
    AppServices-->>AppAPI: executionResults
    AppAPI-->>UI: executionResults