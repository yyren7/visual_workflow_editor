[
    {
        "section_title": "I. Main Program Process Description",
        "sub_sections": []
    },
    {
        "section_title": "II. Sub-programs and Their Functional Descriptions",
        "content": "1.  **`BRG_Get_BRG` (Get Bearing)**:\n\n    - Function: The robot retrieves a bearing from a specified initial position (e.g., material rack).\n    - Core Logic: Move to bearing standby point -> Move above bearing -> Open bearing clamp -> Descend to bearing precise grasping point -> Close bearing clamp -> Ascend -> Move to departure point -> Return to safe/initial point.\n    - Clamp Involved: `BRG&PLT_Crump` (clamp for operating bearings and pallets).\n\n2.  **`Get_BH_InitialPos` (Get Bearing Housing from Initial Position)**:\n\n    - Function: The robot retrieves a bearing housing from a specified initial position.\n    - Core Logic: Move to bearing housing standby point -> Move above bearing housing -> Open bearing housing clamp -> Descend to bearing housing precise grasping point -> Close bearing housing clamp -> Ascend -> Return to safe/initial point.\n    - Clamp Involved: `BH_Crump` (clamp for operating bearing housings).\n\n3.  **`RMC_Put_BH&BRG` (Place Bearing Housing and Bearing into Right Machining Center)**:\n\n    - Function: The robot sequentially places the previously retrieved bearing housing and bearing into the designated station of the right machining center (RMC).\n    - Core Logic:\n      - Move to RMC standby point.\n      - Place Bearing Housing: Move above RMC bearing housing placement point -> Precisely move to placement point -> Open bearing housing clamp -> Ascend.\n      - Place Bearing: Move above RMC bearing placement point -> Precisely move to placement point -> Open bearing clamp -> Ascend.\n      - Move to RMC departure point.\n    - Clamps Involved: `BH_Crump`, `BRG&PLT_Crump`.\n    - Note: Speed may need to be reduced during placement to ensure accuracy.\n\n4.  **`RMC_Get_BH_Assembled` (Get Assembled Part from Right Machining Center)**:\n\n    - Function: The robot retrieves the assembled (or processed) bearing housing from the right machining center (RMC) (at this point, it may already be assembled with the bearing).\n    - Core Logic: Move to RMC standby point -> Move above assembled part -> Open bearing housing clamp (if previously open, this step is to prepare for grasping) -> Descend to precise grasping point -> Close bearing housing clamp -> Ascend -> Move to departure point.\n    - Clamp Involved: `BH_Crump`.\n\n5.  **`LMC_Put_BH_Temp` (Place Part into Left Machining Center for Temporary Storage)**:\n\n    - Function: The robot places the part retrieved from RMC into the left machining center (LMC) for temporary storage or subsequent processing.\n    - Core Logic: Move to LMC standby point -> Move above LMC placement point -> Precisely move to placement point -> Open bearing housing clamp -> Ascend -> Return to safe/initial point.\n    - Clamp Involved: `BH_Crump`.\n\n6.  **`CNV_Get_PLT` (Get Pallet from Conveyor)**:\n\n    - Function: The robot retrieves an empty pallet from a specified location (possibly another area of the conveyor).\n    - Core Logic: Move to pallet standby point -> Move above pallet -> (Possibly low speed) Precisely move to grasping point -> Close pallet clamp -> Ascend -> Return to safe/initial point.\n    - Clamp Involved: `BRG&PLT_Crump`.\n\n7.  **`CNV_Put_PLT` (Place Pallet onto Conveyor)**:\n\n    - Function: The robot places the retrieved empty pallet onto the designated station of the conveyor.\n    - Core Logic: Move above conveyor pallet placement point -> Precisely move to placement point -> Open pallet clamp -> Ascend -> Return to safe/initial point.\n    - Clamp Involved: `BRG&PLT_Crump`.\n\n8.  **`LMC_Get_BH_Stored` (Get Stored Part from Left Machining Center)**:\n\n    - Function: The robot retrieves the previously stored part from the left machining center (LMC).\n    - Core Logic: Move to LMC standby point -> Move above part -> Precisely move to grasping point -> Close bearing housing clamp -> Ascend -> Return to safe/initial point.\n    - Clamp Involved: `BH_Crump`.\n\n9.  **`CNV_Put_BH_On_PLT` (Place Part onto Pallet on Conveyor)**:\n\n    - Function: The robot accurately places the part retrieved from LMC into the pre-placed pallet on the conveyor.\n    - Core Logic: Move above conveyor pallet (with loaded part) -> Precisely move to designated placement point within pallet -> Open bearing housing clamp -> Ascend -> Return to safe/initial point.\n    - Clamp Involved: `BH_Crump`.\n\n10. **`Open_BH_Crump` (Open Bearing Housing Clamp)**:\n\n    - Function: Controls the robot end-effector to open the clamp used for holding the bearing housing.\n    - Core Logic: Send open signal, wait for clamp in-position feedback.\n\n11. **`Close_BH_Crump` (Close Bearing Housing Clamp)**:\n\n    - Function: Controls the robot end-effector to close the clamp used for holding the bearing housing.\n    - Core Logic: Send close signal, wait for clamp in-position feedback.\n\n12. **`Open_BRG&PLT_Crump` (Open Bearing/Pallet Clamp)**:\n\n    - Function: Controls the robot end-effector to open the clamp used for holding bearings or pallets.\n    - Core Logic: Send open signal, wait for clamp in-position feedback.\n\n13. **`Close_BRG&PLT_Crump` (Close Bearing/Pallet Clamp)**:\n    - Function: Controls the robot end-effector to close the clamp used for holding bearings or pallets.\n    - Core Logic: Send close signal, wait for clamp in-position feedback."
    },
    {
        "section_title": "III. Modularization and Reuse Explanation",
        "content": "-   **Clamp Operations**: `Open/Close_BH_Crump` and `Open/Close_BRG&PLT_Crump` are designed as independent, reusable sub-programs. They encapsulate the specific control logic for each clamp type and are called by various material handling sub-programs (`BRG_Get_BRG`, `Get_BH_InitialPos`, `RMC_Put_BH&BRG`, etc.). This promotes consistency and simplifies maintenance.\n-   **Standard Movement Sequences**: Most pick and place sub-programs (`BRG_Get_BRG`, `Get_BH_InitialPos`, `CNV_Get_PLT`, etc.) follow a common \"approach target -> precise positioning -> execute action (grasp/release) -> depart target -> return to safe position\" movement pattern. This logic can be abstracted and reused, potentially through parameterized functions for different target locations.\n-   **Speed Control**: For operations requiring high precision or delicate handling (e.g., `RMC_Put_BH&BRG`, `CNV_Get_PLT`), the core logic explicitly mentions the need for reduced speed during critical phases. This can be implemented via a parameter or a dedicated low-speed movement function.\n-   **External Interaction and Synchronization**: The main process incorporates multiple points for synchronization with external devices (RMC, LMC, conveyor). This is achieved by waiting for specific input signals (`RMC_Ready_IN`, `RMC_Done_IN`) and sending output signals (`RMC_PartTaken_OUT`, `Task_Complete_OUT`). This modular approach ensures robust interaction with the surrounding environment.\n-   **Optional Logic**: Features like waiting for an external start signal or sending a task complete signal are marked as optional. This allows for flexible deployment, where these features can be enabled or disabled based on the specific system integration requirements without altering the core process flow."
    }
]