[
    {
        "section_title": "I. Main Program Process Description",
        "content": "-   Select robot model (e.g., \"dobot_mg400\"). (Block Type: `select_robot`)\n-   Start robot motors. (Block Type: `set_motor`)\n-   Connect to external I/O devices. (Block Type: `connect_external_io`)\n-   Initialize necessary process control variables (e.g., `start_condition = 2`). (Block Type: `set_number`)\n-   Robot moves to **initial/safe point (e.g., \"P_Home\")**. (Block Type: `moveP`)\n-   Main Loop start (Block Type: `loop`)\n    -   Check condition: `start_condition = 2` (or an infinite loop for continuous operation). (Block Type: `controls_if`)\n    -   **(Optional/Disabled Logic)** Wait for external start signal (e.g., external IO input `Start_Signal_IN`). (Block Type: `wait_external_io_input`)\n    -   Call sub-program `Get_BRG_InitialPos` (Get Bearing from Initial Position). (Block Type: `procedures_callnoreturn`)\n    -   Robot moves to **initial/safe point (e.g., \"P_Home\")**. (Block Type: `moveP`)\n    -   Wait for signal that machining center (RMC) is ready for bearing (`RMC_BRG_Ready_IN`). (Block Type: `wait_external_io_input`)\n    -   Call sub-program `RMC_Put_BRG` (Place Bearing into RMC). (Block Type: `procedures_callnoreturn`)\n    -   Robot moves to **initial/safe point (e.g., \"P_Home\")**. (Block Type: `moveP`)\n    -   Call sub-program `Get_BH_InitialPos` (Get Bearing Housing from Initial Position). (Block Type: `procedures_callnoreturn`)\n    -   Robot moves to **initial/safe point (e.g., \"P_Home\")**. (Block Type: `moveP`)\n    -   Wait for signal that machining center (RMC) is ready for bearing housing (`RMC_BH_Ready_IN`). (Block Type: `wait_external_io_input`)\n    -   Call sub-program `RMC_Put_BH` (Place Bearing Housing into RMC). (Block Type: `procedures_callnoreturn`)\n    -   Wait for RMC machining complete signal (`RMC_Done_IN`). (Block Type: `wait_external_io_input`)\n    -   Send signal to notify RMC that part has been taken or is ready to be taken (`RMC_PartTaken_OUT`). (Block Type: `set_external_io_output_upon`)\n    -   Wait for RMC confirmation signal (`RMC_Confirm_IN`). (Block Type: `wait_external_io_input`)\n    -   Call sub-program `RMC_Get_Assembled_Part` (Get Assembled Part from RMC). (Block Type: `procedures_callnoreturn`)\n    -   Robot moves to **initial/safe point (e.g., \"P_Home\")**. (Block Type: `moveP`)\n    -   Call sub-program `LMC_Put_Temp_Storage` (Place Part into LMC for Temporary Storage). (Block Type: `procedures_callnoreturn`)\n    -   Robot moves to **initial/safe point (e.g., \"P_Home\")**. (Block Type: `moveP`)\n    -   Call sub-program `CNV_Get_PLT` (Get Pallet from Conveyor). (Block Type: `procedures_callnoreturn`)\n    -   Call sub-program `CNV_Put_PLT` (Place Pallet onto Conveyor). (Block Type: `procedures_callnoreturn`)\n    -   Robot moves to **initial/safe point (e.g., \"P_Home\")**. (Block Type: `moveP`)\n    -   Call sub-program `LMC_Get_Stored_Part` (Get Stored Part from LMC). (Block Type: `procedures_callnoreturn`)\n    -   Robot moves to **initial/safe point (e.g., \"P_Home\")**. (Block Type: `moveP`)\n    -   Call sub-program `CNV_Put_Part_On_PLT` (Place Part onto Pallet on Conveyor). (Block Type: `procedures_callnoreturn`)\n    -   **(Optional/Disabled Logic)** Send task complete signal to external system (`Task_Complete_OUT`). (Block Type: `set_external_io_output_upon`)\n    -   Return to start of loop (Block Type: `return`)"
    },
    {
        "section_title": "II. Sub-programs and Their Functional Descriptions",
        "sub_sections": [
            {
                "item_number": "1",
                "title": "**`Get_BRG_InitialPos` (Get Bearing from Initial Position)**:",
                "content": "-   Function: The robot retrieves a bearing from a specified initial position (e.g., material rack).\n    -   Core Logic: Move to bearing standby point (Block Type: `moveP`) -> Move above bearing (Block Type: `moveP`) -> Call `Open_BRG_PLT_Crump` -> Descend to bearing precise grasping point (Block Type: `moveP`) -> Call `Close_BRG_PLT_Crump` -> Ascend (Block Type: `moveP`) -> Move to departure point (Block Type: `moveP`).\n    -   Clamp Involved: `BRG_PLT_Crump` (clamp for operating bearings and pallets)."
            },
            {
                "item_number": "2",
                "title": "**`Get_BH_InitialPos` (Get Bearing Housing from Initial Position)**:",
                "content": "-   Function: The robot retrieves a bearing housing from a specified initial position.\n    -   Core Logic: Move to bearing housing standby point (Block Type: `moveP`) -> Move above bearing housing (Block Type: `moveP`) -> Call `Open_BH_Crump` -> Descend to bearing housing precise grasping point (Block Type: `moveP`) -> Call `Close_BH_Crump` -> Ascend (Block Type: `moveP`) -> Move to departure point (Block Type: `moveP`).\n    -   Clamp Involved: `BH_Crump` (clamp for operating bearing housings)."
            },
            {
                "item_number": "3",
                "title": "**`RMC_Put_BRG` (Place Bearing into Right Machining Center)**:",
                "content": "-   Function: The robot places the previously retrieved bearing into the designated station of the right machining center (RMC).\n    -   Core Logic: Move to RMC standby point (Block Type: `moveP`) -> Move above RMC bearing placement point (Block Type: `moveP`) -> Precisely move to placement point (Block Type: `moveP`) -> Call `Open_BRG_PLT_Crump` -> Ascend (Block Type: `moveP`) -> Move to RMC departure point (Block Type: `moveP`).\n    -   Clamp Involved: `BRG_PLT_Crump`.\n    -   Note: Speed may need to be reduced during placement to ensure accuracy (Block Type: `set_speed`)."
            },
            {
                "item_number": "4",
                "title": "**`RMC_Put_BH` (Place Bearing Housing into Right Machining Center)**:",
                "content": "-   Function: The robot places the previously retrieved bearing housing into the designated station of the right machining center (RMC).\n    -   Core Logic: Move to RMC standby point (Block Type: `moveP`) -> Move above RMC bearing housing placement point (Block Type: `moveP`) -> Precisely move to placement point (Block Type: `moveP`) -> Call `Open_BH_Crump` -> Ascend (Block Type: `moveP`) -> Move to RMC departure point (Block Type: `moveP`).\n    -   Clamp Involved: `BH_Crump`.\n    -   Note: Speed may need to be reduced during placement to ensure accuracy (Block Type: `set_speed`)."
            },
            {
                "item_number": "5",
                "title": "**`RMC_Get_Assembled_Part` (Get Assembled Part from Right Machining Center)**:",
                "content": "-   Function: The robot retrieves the assembled (or processed) bearing housing from the right machining center (RMC).\n    -   Core Logic: Move to RMC standby point (Block Type: `moveP`) -> Move above assembled part (Block Type: `moveP`) -> Call `Open_BH_Crump` -> Descend to precise grasping point (Block Type: `moveP`) -> Call `Close_BH_Crump` -> Ascend (Block Type: `moveP`) -> Move to departure point (Block Type: `moveP`).\n    -   Clamp Involved: `BH_Crump`."
            },
            {
                "item_number": "6",
                "title": "**`LMC_Put_Temp_Storage` (Place Part into Left Machining Center for Temporary Storage)**:",
                "content": "-   Function: The robot places the part retrieved from RMC into the left machining center (LMC) for temporary storage or subsequent processing.\n    -   Core Logic: Move to LMC standby point (Block Type: `moveP`) -> Move above LMC placement point (Block Type: `moveP`) -> Precisely move to placement point (Block Type: `moveP`) -> Call `Open_BH_Crump` -> Ascend (Block Type: `moveP`) -> Move to departure point (Block Type: `moveP`).\n    -   Clamp Involved: `BH_Crump`."
            },
            {
                "item_number": "7",
                "title": "**`CNV_Get_PLT` (Get Pallet from Conveyor)**:",
                "content": "-   Function: The robot retrieves an empty pallet from a specified location (possibly another area of the conveyor).\n    -   Core Logic: Move to pallet standby point (Block Type: `moveP`) -> Move above pallet (Block Type: `moveP`) -> (Possibly low speed - Block Type: `set_speed`) Precisely move to grasping point (Block Type: `moveP`) -> Call `Close_BRG_PLT_Crump` -> Ascend (Block Type: `moveP`) -> Move to departure point (Block Type: `moveP`).\n    -   Clamp Involved: `BRG_PLT_Crump`."
            },
            {
                "item_number": "8",
                "title": "**`CNV_Put_PLT` (Place Pallet onto Conveyor)**:",
                "content": "-   Function: The robot places the retrieved empty pallet onto the designated station of the conveyor.\n    -   Core Logic: Move above conveyor pallet placement point (Block Type: `moveP`) -> Precisely move to placement point (Block Type: `moveP`) -> Call `Open_BRG_PLT_Crump` -> Ascend (Block Type: `moveP`) -> Move to departure point (Block Type: `moveP`).\n    -   Clamp Involved: `BRG_PLT_Crump`."
            },
            {
                "item_number": "9",
                "title": "**`LMC_Get_Stored_Part` (Get Stored Part from Left Machining Center)**:",
                "content": "-   Function: The robot retrieves the previously stored part from the left machining center (LMC).\n    -   Core Logic: Move to LMC standby point (Block Type: `moveP`) -> Move above part (Block Type: `moveP`) -> Precisely move to grasping point (Block Type: `moveP`) -> Call `Close_BH_Crump` -> Ascend (Block Type: `moveP`) -> Move to departure point (Block Type: `moveP`).\n    -   Clamp Involved: `BH_Crump`."
            },
            {
                "item_number": "10",
                "title": "**`CNV_Put_Part_On_PLT` (Place Part onto Pallet on Conveyor)**:",
                "content": "-   Function: The robot accurately places the part retrieved from LMC into the pre-placed pallet on the conveyor.\n    -   Core Logic: Move above conveyor pallet (with loaded part) (Block Type: `moveP`) -> Precisely move to designated placement point within pallet (Block Type: `moveP`) -> Call `Open_BH_Crump` -> Ascend (Block Type: `moveP`) -> Move to departure point (Block Type: `moveP`).\n    -   Clamp Involved: `BH_Crump`."
            },
            {
                "item_number": "11",
                "title": "**`Open_BH_Crump` (Open Bearing Housing Clamp)**:",
                "content": "-   Function: Controls the robot end-effector to open the clamp used for holding the bearing housing.\n    -   Core Logic: Send open signal (Block Type: `set_output`), wait for clamp in-position feedback (Block Type: `wait_input`)."
            },
            {
                "item_number": "12",
                "title": "**`Close_BH_Crump` (Close Bearing Housing Clamp)**:",
                "content": "-   Function: Controls the robot end-effector to close the clamp used for holding the bearing housing.\n    -   Core Logic: Send close signal (Block Type: `set_output`), wait for clamp in-position feedback (Block Type: `wait_input`)."
            },
            {
                "item_number": "13",
                "title": "**`Open_BRG_PLT_Crump` (Open Bearing/Pallet Clamp)**:",
                "content": "-   Function: Controls the robot end-effector to open the clamp used for holding bearings or pallets.\n    -   Core Logic: Send open signal (Block Type: `set_output`), wait for clamp in-position feedback (Block Type: `wait_input`)."
            },
            {
                "item_number": "14",
                "title": "**`Close_BRG_PLT_Crump` (Close Bearing/Pallet Clamp)**:",
                "content": "-   Function: Controls the robot end-effector to close the clamp used for holding bearings or pallets.\n    -   Core Logic: Send close signal (Block Type: `set_output`), wait for clamp in-position feedback (Block Type: `wait_input`)."
            }
        ]
    },
    {
        "section_title": "III. Modularization and Reuse Explanation",
        "content": "-   **Clamp Operations**: `Open/Close_BH_Crump` and `Open/Close_BRG_PLT_Crump` are designed as independent, reusable sub-programs. They encapsulate the specific control logic for each clamp type and are called by various material handling sub-programs (`Get_BRG_InitialPos`, `Get_BH_InitialPos`, `RMC_Put_BRG`, `RMC_Put_BH`, etc.). This promotes consistency and simplifies maintenance.\n-   **Standard Movement Sequences**: Most pick and place sub-programs (`Get_BRG_InitialPos`, `Get_BH_InitialPos`, `CNV_Get_PLT`, etc.) follow a common \"approach target -> precise positioning -> execute action (grasp/release) -> depart target\" movement pattern. This logic is consistently applied across different material handling tasks.\n-   **Speed Control**: For operations requiring high precision or delicate handling (e.g., `RMC_Put_BRG`, `RMC_Put_BH`, `CNV_Get_PLT`), the core logic explicitly mentions the need for reduced speed during critical phases. This can be implemented via a `set_speed` block before the precise movement.\n-   **External Interaction and Synchronization**: The main process incorporates multiple points for synchronization with external devices (RMC, LMC, conveyor). This is achieved by waiting for specific input signals (`RMC_BRG_Ready_IN`, `RMC_BH_Ready_IN`, `RMC_Done_IN`, `RMC_Confirm_IN`) using `wait_external_io_input` and sending output signals (`RMC_PartTaken_OUT`, `Task_Complete_OUT`) using `set_external_io_output_upon`. This modular approach ensures robust interaction with the surrounding environment.\n-   **Optional Logic**: Features like waiting for an external start signal or sending a task complete signal are marked as optional. This allows for flexible deployment, where these features can be enabled or disabled based on the specific system integration requirements without altering the core process flow."
    }
]