## Robot Operation Detailed Process Steps

### I. Main Program Steps

1.  Select **robot model "dobot_mg400"** (Block Type: `select_robot`)
2.  **Start robot motors (state: "on")** (Block Type: `set_motor`)
3.  Set **numerical variable "N5" (for `start_condition`) to value "2"** (Block Type: `set_number`)
4.  Start loop - Operations within loop: (Block Type: `loop`)
5.  Conditional judgment - IF condition: **Numerical variable "N5" equals numerical value "2"** - DO (if condition is true): (Block Type: `controls_if`)
6.  PTP move to **initial/safe point "P1"** (Block Type: `moveP`)
7.  Wait for external I/O input (**I/O number: 1, pin: "0", state: "on"**) (Block Type: `wait_external_io_input`, `disabled="true"`)
8.  Call sub-program "BRG_Get_BRG" (Get Bearing) (Block Type: `procedures_callnoreturn`)
9.  Call sub-program "Get_BH_InitialPos" (Get Bearing Housing from Initial Position) (Block Type: `procedures_callnoreturn`)
10. PTP move to **initial/safe point "P1"** (Block Type: `moveP`)
11. Wait for external I/O input (**I/O number: 1, pin: "1", state: "on"**) (Block Type: `wait_external_io_input`)
12. Call sub-program "RMC_Put_BH&BRG" (Place Bearing Housing and Bearing into Right Machining Center) (Block Type: `procedures_callnoreturn`)
13. Wait for external I/O input (**I/O number: 1, pin: "2", state: "on"**) (Block Type: `wait_external_io_input`)
14. Set robot **output pin "6" to state "on"** (to notify RMC part taken) (Block Type: `set_output`)
15. Wait for external I/O input (**I/O number: 1, pin: "3", state: "on"**) (Block Type: `wait_external_io_input`)
16. Call sub-program "RMC_Get_BH_Assembled" (Get Assembled Part from RMC) (Block Type: `procedures_callnoreturn`)
17. PTP move to **initial/safe point "P1"** (Block Type: `moveP`)
18. Call sub-program "LMC_Put_BH_Temp" (Place Part into LMC for Temporary Storage) (Block Type: `procedures_callnoreturn`)
19. PTP move to **initial/safe point "P1"** (Block Type: `moveP`)
20. Call sub-program "CNV_Get_PLT" (Get Pallet from Conveyor) (Block Type: `procedures_callnoreturn`)
21. Call sub-program "CNV_Put_PLT" (Place Pallet onto Conveyor) (Block Type: `procedures_callnoreturn`)
22. PTP move to **initial/safe point "P1"** (Block Type: `moveP`)
23. Call sub-program "LMC_Get_BH_Stored" (Get Stored Part from LMC) (Block Type: `procedures_callnoreturn`)
24. PTP move to **initial/safe point "P1"** (Block Type: `moveP`)
25. Call sub-program "CNV_Put_BH_On_PLT" (Place Part onto Pallet on Conveyor) (Block Type: `procedures_callnoreturn`)
26. Set robot **output pin "7" to state "on"** (Task Complete Signal) (Block Type: `set_output`, `disabled="true"`)
27. Return to start of loop (Block Type: `return`)

### II. Sub-program Steps

#### 1. `BRG_Get_BRG` (Get Bearing)

1.1. **Define sub-program "BRG_Get_BRG"** (Block Type: `procedures_defnoreturn`)
1.2. PTP move to **bearing pick-up standby point "P21"** (Block Type: `moveP`)
1.3. PTP move to **approach point above bearing "P22"** (Block Type: `moveP`)
1.4. Call sub-program "Open_BRG&PLT_Crump" (Block Type: `procedures_callnoreturn`)
1.5. PTP move to **bearing precise grasping point "P23"** (Block Type: `moveP`)
1.6. Call sub-program "Close_BRG&PLT_Crump" (Block Type: `procedures_callnoreturn`)
1.7. PTP move to **lift point after bearing grasping "P25"** (Block Type: `moveP`)
1.8. PTP move to **bearing pick-up departure point "P26"** (Block Type: `moveP`)
1.9. PTP move to **bearing pick-up standby point "P21"** (Block Type: `moveP`)

#### 2. `Get_BH_InitialPos` (Get Bearing Housing from Initial Position)

2.1. **Define sub-program "Get_BH_InitialPos"** (Block Type: `procedures_defnoreturn`)
2.2. PTP move to **bearing housing pick-up standby point "P31"** (Block Type: `moveP`)
2.3. PTP move to **approach point above bearing housing "P32"** (Block Type: `moveP`)
2.4. Call sub-program "Open_BH_Crump" (Block Type: `procedures_callnoreturn`)
2.5. PTP move to **bearing housing precise grasping point "P33"** (Block Type: `moveP`)
2.6. Call sub-program "Close_BH_Crump" (Block Type: `procedures_callnoreturn`)
2.7. PTP move to **lift point after bearing housing grasping "P32"** (Block Type: `moveP`)
2.8. PTP move to **bearing housing pick-up standby point "P31"** (Block Type: `moveP`)

#### 3. `RMC_Put_BH&BRG` (Place Bearing Housing and Bearing into Right Machining Center)

3.1. **Define sub-program "RMC_Put_BH&BRG"** (Block Type: `procedures_defnoreturn`)
3.2. PTP move to **RMC transition/travel point "P20"** (Block Type: `moveP`)
3.3. PTP move to **RMC standby point for BH placement "P11"** (Block Type: `moveP`)
3.4. PTP move to **RMC intermediate/transfer point "P12"** (Block Type: `moveP`)
3.5. PTP move to **RMC BH interaction/access point "P14"** (Block Type: `moveP`)
3.6. PTP move to **RMC BH grasp/release point "P15"** (Block Type: `moveP`)
3.7. Call sub-program "Open_BH_Crump" (Block Type: `procedures_callnoreturn`)
3.8. Set robot speed to **10% (for precise placement)** (Block Type: `set_speed`)
3.9. PTP move to **RMC BH interaction/access point "P14"** (Block Type: `moveP`)
3.10. Set robot speed to **100% (restore normal speed)** (Block Type: `set_speed`)
3.11. PTP move to **RMC standby for BRG placement "P13"** (Block Type: `moveP`)
3.12. PTP move to **RMC BRG hover/access point "P16"** (Block Type: `moveP`)
3.13. PTP move to **RMC BRG precise placement point "P17"** (Block Type: `moveP`)
3.14. Call sub-program "Open_BRG&PLT_Crump" (Block Type: `procedures_callnoreturn`)
3.15. Set robot speed to **10% (for precise placement)** (Block Type: `set_speed`)
3.16. PTP move to **RMC BRG hover/access point "P16"** (Block Type: `moveP`)
3.17. Set robot speed to **100% (restore normal speed)** (Block Type: `set_speed`)
3.18. PTP move to **RMC intermediate/transfer point "P12"** (Block Type: `moveP`)

#### 4. `RMC_Get_BH_Assembled` (Get Assembled Part from Right Machining Center)

4.1. **Define sub-program "RMC_Get_BH_Assembled"** (Block Type: `procedures_defnoreturn`)
4.2. PTP move to **RMC standby point for assembled part pick-up "P11"** (Block Type: `moveP`)
4.3. PTP move to **RMC intermediate/transfer point "P12"** (Block Type: `moveP`)
4.4. PTP move to **RMC BH interaction/access point "P14"** (Block Type: `moveP`)
4.5. PTP move to **RMC BH grasp/release point "P15"** (Block Type: `moveP`)
4.6. Call sub-program "Close_BH_Crump" (Block Type: `procedures_callnoreturn`)
4.7. PTP move to **RMC BH interaction/access point "P14"** (Block Type: `moveP`)
4.8. PTP move to **RMC intermediate/transfer point "P12"** (Block Type: `moveP`)
4.9. PTP move to **RMC departure point with part "P11"** (Block Type: `moveP`)
4.10. PTP move to **RMC transition/travel point "P20"** (Block Type: `moveP`)

#### 5. `LMC_Put_BH_Temp` (Place Part into Left Machining Center for Temporary Storage)

5.1. **Define sub-program "LMC_Put_BH_Temp"** (Block Type: `procedures_defnoreturn`)
5.2. PTP move to **LMC transfer/standby point "P41"** (Block Type: `moveP`)
5.3. PTP move to **LMC hover/access point "P42"** (Block Type: `moveP`)
5.4. PTP move to **LMC grasp/release point "P43"** (Block Type: `moveP`)
5.5. Call sub-program "Open_BH_Crump" (Block Type: `procedures_callnoreturn`)
5.6. PTP move to **LMC hover/access point "P42"** (Block Type: `moveP`)
5.7. PTP move to **LMC transfer/standby point "P41"** (Block Type: `moveP`)
5.8. PTP move to **main safe/initial point "P1"** (Block Type: `moveP`)

#### 6. `CNV_Get_PLT` (Get Pallet from Conveyor)

6.1. **Define sub-program "CNV_Get_PLT"** (Block Type: `procedures_defnoreturn`)
6.2. PTP move to **pallet handling standby point "P34"** (Block Type: `moveP`)
6.3. PTP move to **pallet pickup hover/ascent point "P35"** (Block Type: `moveP`)
6.4. Set robot speed to **10% (for precise grasping)** (Block Type: `set_speed`)
6.5. PTP move to **pallet precise grasping point "P36"** (Block Type: `moveP`)
6.6. Call sub-program "Close_BRG&PLT_Crump" (Block Type: `procedures_callnoreturn`)
6.7. PTP move to **pallet pickup hover/ascent point "P35"** (Block Type: `moveP`)
6.8. Set robot speed to **100% (restore normal speed)** (Block Type: `set_speed`)
6.9. PTP move to **pallet handling standby point "P34"** (Block Type: `moveP`)

#### 7. `CNV_Put_PLT` (Place Pallet onto Conveyor)

7.1. **Define sub-program "CNV_Put_PLT"** (Block Type: `procedures_defnoreturn`)
7.2. PTP move to **CNV pallet placement hover/ascent point "P37"** (Block Type: `moveP`)
7.3. PTP move to **pallet precise placement point on conveyor "P38"** (Block Type: `moveP`)
7.4. Call sub-program "Open_BRG&PLT_Crump" (Block Type: `procedures_callnoreturn`)
7.5. PTP move to **CNV pallet placement hover/ascent point "P37"** (Block Type: `moveP`)
7.6. PTP move to **pallet handling standby point "P34"** (Block Type: `moveP`)

#### 8. `LMC_Get_BH_Stored` (Get Stored Part from Left Machining Center)

8.1. **Define sub-program "LMC_Get_BH_Stored"** (Block Type: `procedures_defnoreturn`)
8.2. PTP move to **LMC transfer/standby point "P41"** (Block Type: `moveP`)
8.3. PTP move to **LMC hover/access point "P42"** (Block Type: `moveP`)
8.4. PTP move to **LMC grasp/release point "P43"** (Block Type: `moveP`)
8.5. Call sub-program "Close_BH_Crump" (Block Type: `procedures_callnoreturn`)
8.6. PTP move to **LMC hover/access point "P42"** (Block Type: `moveP`)
8.7. PTP move to **LMC transfer/standby point "P41"** (Block Type: `moveP`)

#### 9. `CNV_Put_BH_On_PLT` (Place Part onto Pallet on Conveyor)

9.1. **Define sub-program "CNV_Put_BH_On_PLT"** (Block Type: `procedures_defnoreturn`)
9.2. PTP move to **CNV part-on-pallet hover/ascent point "P39"** (Block Type: `moveP`)
9.3. PTP move to **precise part placement point on pallet "P40"** (Block Type: `moveP`)
9.4. Call sub-program "Open_BH_Crump" (Block Type: `procedures_callnoreturn`)
9.5. PTP move to **CNV part-on-pallet hover/ascent point "P39"** (Block Type: `moveP`)
9.6. PTP move to **main safe/initial point "P1"** (Block Type: `moveP`)
9.7. Return from sub-program (Block Type: `return`)

#### 10. `Open_BH_Crump` (Open Bearing Housing Clamp)

10.1. **Define sub-program "Open_BH_Crump"** (Block Type: `procedures_defnoreturn`)
10.2. Wait for **200 milliseconds (for clamp operation delay)** (Block Type: `wait_timer`)
10.3. Set robot **output pin "1" to state "on" (open clamp)** (Block Type: `set_output`)
10.4. Wait for robot **input pin "0" to be in state "on" (clamp open feedback)** (Block Type: `wait_input`)

#### 11. `Close_BH_Crump` (Close Bearing Housing Clamp)

11.1. **Define sub-program "Close_BH_Crump"** (Block Type: `procedures_defnoreturn`)
11.2. Wait for **200 milliseconds (for clamp operation delay)** (Block Type: `wait_timer`)
11.3. Set robot **output pin "1" to state "off" (close clamp)** (Block Type: `set_output`)
11.4. Wait for robot **input pin "1" to be in state "on" (clamp closed feedback)** (Block Type: `wait_input`)

#### 12. `Open_BRG&PLT_Crump` (Open Bearing/Pallet Clamp)

12.1. **Define sub-program "Open_BRG&PLT_Crump"** (Block Type: `procedures_defnoreturn`)
12.2. Wait for **200 milliseconds (for clamp operation delay)** (Block Type: `wait_timer`)
12.3. Set robot **output pin "2" to state "on" (open clamp)** (Block Type: `set_output`)
12.4. Wait for robot **input pin "2" to be in state "on" (clamp open feedback)** (Block Type: `wait_input`)

#### 13. `Close_BRG&PLT_Crump` (Close Bearing/Pallet Clamp)

13.1. **Define sub-program "Close_BRG&PLT_Crump"** (Block Type: `procedures_defnoreturn`)
13.2. Wait for **200 milliseconds (for clamp operation delay)** (Block Type: `wait_timer`)
13.3. Set robot **output pin "2" to state "off" (close clamp)** (Block Type: `set_output`)
13.4. Wait for robot **input pin "3" to be in state "on" (clamp closed feedback)** (Block Type: `wait_input`)