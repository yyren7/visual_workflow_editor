classDiagram
    class User {
        +id: UUID
        +username: String
        +email: String
        +password_hash: String
        +role: UserRole
        +created_at: DateTime
        +updated_at: DateTime
        +authenticate(password: String): Boolean
        +getProjects(): List~Project~
    }
    
    class UserRole {
        <<enumeration>>
        ADMIN
        USER
        GUEST
    }
    
    class Project {
        +id: UUID
        +name: String
        +description: String
        +owner_id: UUID
        +created_at: DateTime
        +updated_at: DateTime
        +getFlows(): List~Flow~
        +addCollaborator(user_id: UUID, permission: Permission): Boolean
        +removeCollaborator(user_id: UUID): Boolean
    }
    
    class Permission {
        +id: UUID
        +user_id: UUID
        +resource_id: UUID
        +resource_type: ResourceType
        +permission_level: PermissionLevel
        +granted_by: UUID
        +granted_at: DateTime
        +check(action: String): Boolean
    }
    
    class ResourceType {
        <<enumeration>>
        PROJECT
        FLOW
    }
    
    class PermissionLevel {
        <<enumeration>>
        OWNER
        WRITE
        READ
    }
    
    class Flow {
        +id: UUID
        +name: String
        +description: String
        +project_id: UUID
        +version: Integer
        +created_at: DateTime
        +updated_at: DateTime
        +getNodes(): List~Node~
        +getEdges(): List~Edge~
        +getVariables(): List~Variable~
        +saveVersion(comment: String): Version
        +restoreVersion(version_id: UUID): Boolean
        +exportToJson(): JSON
        +importFromJson(json_data: JSON): Boolean
    }
    
    class Node {
        +id: UUID
        +type: String
        +label: String
        +flow_id: UUID
        +position: Position
        +data: JSON
        +style: JSON
        +created_at: DateTime
        +updated_at: DateTime
        +execute(context: ExecutionContext): Result
        +validateConnections(): Boolean
        +generateCode(): String
    }
    
    class Edge {
        +id: UUID
        +source_id: UUID
        +target_id: UUID
        +source_handle: String
        +target_handle: String
        +flow_id: UUID
        +label: String
        +style: JSON
        +condition: String
        +priority: Integer
        +validateConnection(): Boolean
    }
    
    class Variable {
        +id: UUID
        +name: String
        +scope: VariableScope
        +type: DataType
        +default_value: Any
        +value: Any
        +description: String
        +flow_id: UUID
        +node_id: UUID?
        +is_required: Boolean
        +validation_rules: JSON
        +created_at: DateTime
        +updated_at: DateTime
        +getValue(): Any
        +setValue(value: Any): Boolean
        +validate(): ValidationResult
    }
    
    class VariableScope {
        <<enumeration>>
        GLOBAL
        NODE
    }
    
    class DataType {
        <<enumeration>>
        STRING
        NUMBER
        BOOLEAN
        OBJECT
        ARRAY
    }
    
    class Version {
        +id: UUID
        +flow_id: UUID
        +snapshot: JSON
        +created_at: DateTime
        +created_by: UUID
        +comment: String
        +restore(): Flow
        +diff(other_version: Version): VersionDiff
    }
    
    class NodeTemplate {
        +id: UUID
        +type: String
        +name: String
        +description: String
        +category: String
        +icon: String
        +color: String
        +input_ports: List~Port~
        +output_ports: List~Port~
        +default_data: JSON
        +schema: JSON
        +is_system: Boolean
        +created_by: UUID
        +created_at: DateTime
        +updated_at: DateTime
        +validateSchema(): Boolean
        +instantiate(data: JSON): Node
    }
    
    class Port {
        +id: String
        +name: String
        +type: String
        +description: String
        +required: Boolean
    }
    
    class ChatSession {
        +id: UUID
        +user_id: UUID
        +flow_id: UUID?
        +created_at: DateTime
        +updated_at: DateTime
        +getMessages(): List~ChatMessage~
        +addMessage(content: String, role: MessageRole): ChatMessage
        +generateNodeFromChat(message_id: UUID): Node
    }
    
    class ChatMessage {
        +id: UUID
        +session_id: UUID
        +content: String
        +role: MessageRole
        +metadata: JSON
        +created_at: DateTime
        +annotate(annotation: String): Boolean
        +generateNode(): Node
    }
    
    class MessageRole {
        <<enumeration>>
        USER
        ASSISTANT
    }
    
    class ExecutionContext {
        +flow_id: UUID
        +variables: Map~String, Any~
        +current_node: UUID
        +input_data: JSON
        +start_time: DateTime
        +timeout: Integer
        +getVariable(name: String): Any
        +setVariable(name: String, value: Any): Boolean
        +executeNode(node_id: UUID): Result
    }
    
    class Result {
        +success: Boolean
        +data: Any
        +error: String?
        +execution_time: Integer
    }
    
    User "1" --o "n" Project : owns
    User "m" --o "n" Permission : has
    Project "1" --o "n" Flow : contains
    Project "1" --o "n" Permission : controls_access_to
    Flow "1" --* "n" Node : contains
    Flow "1" --* "n" Edge : contains
    Flow "1" --* "n" Variable : has_global
    Flow "1" --* "n" Version : has_history
    Node "1" --* "n" Variable : has_local
    Node "n" -- "1" NodeTemplate : based_on
    Edge "1" -- "1" Node : source
    Edge "1" -- "1" Node : target
    User "1" --o "n" ChatSession : has
    ChatSession "1" --* "n" ChatMessage : contains
    Flow "1" --o "n" ChatSession : referenced_by
    Variable -- DataType : has_type
    Variable -- VariableScope : has_scope
    User -- UserRole : has_role
    Permission -- ResourceType : applies_to
    Permission -- PermissionLevel : has_level
    ChatMessage -- MessageRole : has_role